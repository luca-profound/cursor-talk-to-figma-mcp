// Auto-generated by generate-figma-manifest.ts
export type ManifestScope = 'figma' | 'node';

export interface ManifestParameterInfo {
  name: string;
  type: string;
  optional: boolean;
  rest: boolean;
}

export interface ManifestEntry {
  id: string;
  scope: ManifestScope;
  path: string;
  interface: string;
  member: string;
  kind: 'method';
  overloadIndex: number;
  parameters: ManifestParameterInfo[];
  returns: string;
  async: boolean;
  deprecated: boolean;
  docs?: string;
}

export const figmaManifest: readonly ManifestEntry[] = [
  {
    "id": "figma.annotations.addAnnotationCategoryAsync",
    "scope": "figma",
    "path": "figma.annotations",
    "interface": "AnnotationsAPI",
    "member": "addAnnotationCategoryAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "categoryInput",
        "type": "{ label: string; color: AnnotationCategoryColor; }",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<AnnotationCategory>",
    "async": true,
    "deprecated": false,
    "docs": "Adds a new {@link AnnotationCategory}."
  },
  {
    "id": "figma.annotations.getAnnotationCategoriesAsync",
    "scope": "figma",
    "path": "figma.annotations",
    "interface": "AnnotationsAPI",
    "member": "getAnnotationCategoriesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<AnnotationCategory[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns a list of all {@link AnnotationCategory}s that exist in the current file."
  },
  {
    "id": "figma.annotations.getAnnotationCategoryByIdAsync",
    "scope": "figma",
    "path": "figma.annotations",
    "interface": "AnnotationsAPI",
    "member": "getAnnotationCategoryByIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<AnnotationCategory>",
    "async": true,
    "deprecated": false,
    "docs": "Returns an {@link AnnotationCategory} by its ID. If not found, returns a promise containing null."
  },
  {
    "id": "figma.base64Decode",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "base64Decode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "data",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Uint8Array<ArrayBufferLike>",
    "async": false,
    "deprecated": false,
    "docs": "Decodes and returns a Uint8Array from the base64-encoded string `data`."
  },
  {
    "id": "figma.base64Encode",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "base64Encode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "data",
        "type": "Uint8Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "Returns a base64-encoded string from the Uint8Array `data`."
  },
  {
    "id": "figma.buzz.createFrame",
    "scope": "figma",
    "path": "figma.buzz",
    "interface": "BuzzAPI",
    "member": "createFrame",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "rowIndex",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "columnIndex",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "FrameNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new frame in Buzz, optionally positioned at specific canvas coordinates."
  },
  {
    "id": "figma.buzz.createInstance",
    "scope": "figma",
    "path": "figma.buzz",
    "interface": "BuzzAPI",
    "member": "createInstance",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "component",
        "type": "ComponentNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "rowIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "columnIndex",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "InstanceNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates an instance of a component in Buzz, optionally positioned at specific canvas coordinates."
  },
  {
    "id": "figma.buzz.getBuzzAssetTypeForNode",
    "scope": "figma",
    "path": "figma.buzz",
    "interface": "BuzzAPI",
    "member": "getBuzzAssetTypeForNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "BuzzAssetType",
    "async": false,
    "deprecated": false,
    "docs": "Gets the Buzz asset type for a given node."
  },
  {
    "id": "figma.buzz.getMediaContent",
    "scope": "figma",
    "path": "figma.buzz",
    "interface": "BuzzAPI",
    "member": "getMediaContent",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "BuzzMediaField[]",
    "async": false,
    "deprecated": false,
    "docs": "Extracts all media content fields from a node for dynamic content management."
  },
  {
    "id": "figma.buzz.getTextContent",
    "scope": "figma",
    "path": "figma.buzz",
    "interface": "BuzzAPI",
    "member": "getTextContent",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "BuzzTextField[]",
    "async": false,
    "deprecated": false,
    "docs": "Extracts all text content fields from a node for dynamic content management."
  },
  {
    "id": "figma.buzz.setBuzzAssetTypeForNode",
    "scope": "figma",
    "path": "figma.buzz",
    "interface": "BuzzAPI",
    "member": "setBuzzAssetTypeForNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "assetType",
        "type": "BuzzAssetType",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sets the Buzz asset type for a given node."
  },
  {
    "id": "figma.buzz.smartResize",
    "scope": "figma",
    "path": "figma.buzz",
    "interface": "BuzzAPI",
    "member": "smartResize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Performs intelligent resizing of a node while maintaining layout integrity and aspect ratios."
  },
  {
    "id": "figma.clientStorage.deleteAsync",
    "scope": "figma",
    "path": "figma.clientStorage",
    "interface": "ClientStorageAPI",
    "member": "deleteAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Removes the stored key/value pair from client storage with the given `key`. If no such key is stored, this function will return normally but will otherwise do nothing."
  },
  {
    "id": "figma.clientStorage.getAsync",
    "scope": "figma",
    "path": "figma.clientStorage",
    "interface": "ClientStorageAPI",
    "member": "getAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<any>",
    "async": true,
    "deprecated": false,
    "docs": "Retrieves a value from client storage with the given `key`. If no value has been stored for that key, this function will asynchronously return `undefined`."
  },
  {
    "id": "figma.clientStorage.keysAsync",
    "scope": "figma",
    "path": "figma.clientStorage",
    "interface": "ClientStorageAPI",
    "member": "keysAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<string[]>",
    "async": true,
    "deprecated": false,
    "docs": "Retrieves a list of all keys stored to client storage. Use this to enumerate the full contents of the clientStorage API."
  },
  {
    "id": "figma.clientStorage.setAsync",
    "scope": "figma",
    "path": "figma.clientStorage",
    "interface": "ClientStorageAPI",
    "member": "setAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "any",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Sets a value to client storage with the given `key`. The returned promise will resolve if storage is successful, or reject with an error message if storage failed."
  },
  {
    "id": "figma.closePlugin",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "closePlugin",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "message",
        "type": "string",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Closes the plugin. You should always call this function once your plugin is done running. When called, any UI that's open will be closed and any `setTimeout` or `setInterval` timers will be cancelled."
  },
  {
    "id": "figma.codegen.off#0",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"generate\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenEvent) => CodegenResult[] | Promise<CodegenResult[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added by {@link CodegenAPI.on`figma.codegen.on`} or {@link CodegenAPI.once`figma.codegen.once`}."
  },
  {
    "id": "figma.codegen.off#0",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"generate\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenEvent) => CodegenResult[] | Promise<CodegenResult[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added by {@link CodegenAPI.on`figma.codegen.on`} or {@link CodegenAPI.once`figma.codegen.once`}."
  },
  {
    "id": "figma.codegen.off#1",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"preferenceschange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenPreferencesEvent) => Promise<void>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added by {@link CodegenAPI.on`figma.codegen.on`} or {@link CodegenAPI.once`figma.codegen.once`}."
  },
  {
    "id": "figma.codegen.off#1",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"preferenceschange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenPreferencesEvent) => Promise<void>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added by {@link CodegenAPI.on`figma.codegen.on`} or {@link CodegenAPI.once`figma.codegen.once`}."
  },
  {
    "id": "figma.codegen.on#0",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"generate\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenEvent) => CodegenResult[] | Promise<CodegenResult[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "A plugin for code generation needs to call `figma.codegen.on('generate')` to register a callback\nthat will be called when a user's selection changes in Dev Mode. This callback\nshould return an array of JSON objects that represent the sections in the\nInspect panel. The callback has a 15 second timeout and returns an error if it times out. For more\ninformation, see the remarks."
  },
  {
    "id": "figma.codegen.on#0",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"generate\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenEvent) => CodegenResult[] | Promise<CodegenResult[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "A plugin for code generation needs to call `figma.codegen.on('generate')` to register a callback\nthat will be called when a user's selection changes in Dev Mode. This callback\nshould return an array of JSON objects that represent the sections in the\nInspect panel. The callback has a 15 second timeout and returns an error if it times out. For more\ninformation, see the remarks."
  },
  {
    "id": "figma.codegen.on#1",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"preferenceschange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenPreferencesEvent) => Promise<void>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "A plugin for code generation needs to call `figma.codegen.on('generate')` to register a callback\nthat will be called when a user's selection changes in Dev Mode. This callback\nshould return an array of JSON objects that represent the sections in the\nInspect panel. The callback has a 15 second timeout and returns an error if it times out. For more\ninformation, see the remarks."
  },
  {
    "id": "figma.codegen.on#1",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"preferenceschange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenPreferencesEvent) => Promise<void>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "A plugin for code generation needs to call `figma.codegen.on('generate')` to register a callback\nthat will be called when a user's selection changes in Dev Mode. This callback\nshould return an array of JSON objects that represent the sections in the\nInspect panel. The callback has a 15 second timeout and returns an error if it times out. For more\ninformation, see the remarks."
  },
  {
    "id": "figma.codegen.once#0",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"generate\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenEvent) => CodegenResult[] | Promise<CodegenResult[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as {@link CodegenAPI.on`figma.codegen.on`}, but the callback only gets called the first time."
  },
  {
    "id": "figma.codegen.once#0",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"generate\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenEvent) => CodegenResult[] | Promise<CodegenResult[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as {@link CodegenAPI.on`figma.codegen.on`}, but the callback only gets called the first time."
  },
  {
    "id": "figma.codegen.once#1",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"preferenceschange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenPreferencesEvent) => Promise<void>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as {@link CodegenAPI.on`figma.codegen.on`}, but the callback only gets called the first time."
  },
  {
    "id": "figma.codegen.once#1",
    "scope": "figma",
    "path": "figma.codegen",
    "interface": "CodegenAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"preferenceschange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CodegenPreferencesEvent) => Promise<void>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as {@link CodegenAPI.on`figma.codegen.on`}, but the callback only gets called the first time."
  },
  {
    "id": "figma.combineAsVariants",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "combineAsVariants",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly ComponentNode[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "parent",
        "type": "BaseNode & ChildrenMixin",
        "optional": false,
        "rest": false
      },
      {
        "name": "index",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "ComponentSetNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a new {@link ComponentSetNode} by combining all the nodes in `nodes`, which should all have type {@link ComponentNode}."
  },
  {
    "id": "figma.commitUndo",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "commitUndo",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Commits actions to undo history. This does not trigger an undo."
  },
  {
    "id": "figma.createBooleanOperation",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createBooleanOperation",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "BooleanOperationNode",
    "async": false,
    "deprecated": true
  },
  {
    "id": "figma.createCanvasRow",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createCanvasRow",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "rowIndex",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "SceneNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new row in the canvas grid at the specified index.\n\nNote: This API is only available in Figma Slides and Figma Buzz"
  },
  {
    "id": "figma.createCodeBlock",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createCodeBlock",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "CodeBlockNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in FigJam\n\nCreates a new code block."
  },
  {
    "id": "figma.createComponent",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createComponent",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "ComponentNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a new, empty component."
  },
  {
    "id": "figma.createComponentFromNode",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createComponentFromNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "ComponentNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a component from an existing node, preserving all of its properties and children. The behavior is similar to using the **Create component** button in the toolbar."
  },
  {
    "id": "figma.createConnector",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createConnector",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "ConnectorNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in FigJam\n\nCreates a new connector. The behavior is similar to using the `Shift-C` shortcut followed by a click."
  },
  {
    "id": "figma.createEffectStyle",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createEffectStyle",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "EffectStyle",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a new Effect style."
  },
  {
    "id": "figma.createEllipse",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createEllipse",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "EllipseNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new ellipse. The behavior is similar to using the `O` shortcut followed by a click."
  },
  {
    "id": "figma.createFrame",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createFrame",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "FrameNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new frame. The behavior is similar to using the `F` shortcut followed by a click."
  },
  {
    "id": "figma.createGif",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createGif",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "hash",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "MediaNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in FigJam\n\nCreates a new GIF with the given `Image` hash."
  },
  {
    "id": "figma.createGridStyle",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createGridStyle",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "GridStyle",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a new Grid style."
  },
  {
    "id": "figma.createImage",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createImage",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "data",
        "type": "Uint8Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Image",
    "async": false,
    "deprecated": false,
    "docs": "Creates an `Image` object from the raw bytes of a file content. Note that `Image` objects **are not nodes**. They are handles to images stored by Figma. Frame backgrounds, or fills of shapes (e.g. a rectangle) may contain images.\n[Example: how to work with images](https://developers.figma.com/docs/plugins/working-with-images)."
  },
  {
    "id": "figma.createImageAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createImageAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "src",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<Image>",
    "async": true,
    "deprecated": false,
    "docs": "Creates an `Image` object from a src URL. Note that `Image` objects **are not nodes**. They are handles to images stored by Figma. Frame backgrounds, or fills of shapes (e.g. a rectangle) may contain images."
  },
  {
    "id": "figma.createLine",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createLine",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "LineNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new line."
  },
  {
    "id": "figma.createLinkPreviewAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createLinkPreviewAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "url",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<EmbedNode | LinkUnfurlNode>",
    "async": true,
    "deprecated": false,
    "docs": "Note: This API is only available in FigJam.\n\nResolves link metadata from a URL, and inserts either an embed or a unfurled preview of the link into the document\nAn embed will be inserted if the URL is a valid OEmbed provider (has a `<link type=\"application/json+oembed\" ... />` tag). The returned `<iframe>` source will be converted into an EmbedNode.\n\nOtherwise, the title, description, thumbnail, and favicon will be parsed from the HTML markup of the URL using standard `og` or `twitter` meta tags. This information will be converted into a LinkUnfurlNode."
  },
  {
    "id": "figma.createNodeFromJSXAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createNodeFromJSXAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "jsx",
        "type": "any",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<SceneNode>",
    "async": true,
    "deprecated": false,
    "docs": "This API creates a new node using the JSX API used by widgets."
  },
  {
    "id": "figma.createNodeFromSvg",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createNodeFromSvg",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "svg",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "FrameNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new node from an SVG string. This is equivalent to the SVG import feature in the editor. See the [official documentation on SVG paths](https://www.w3.org/TR/SVG/paths.html) for more details."
  },
  {
    "id": "figma.createPage",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createPage",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "PageNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a new page, appended to the document's list of children."
  },
  {
    "id": "figma.createPageDivider",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createPageDivider",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "dividerName",
        "type": "string",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "PageNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new page divider, appended to the document's list of children. A page divider is a {@link PageNode} with `isPageDivider` true."
  },
  {
    "id": "figma.createPaintStyle",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createPaintStyle",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "PaintStyle",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a new Paint style. This might be referred to as a Color style, or Fill style more colloquially. However, since this type of style may contain images, and may be used for backgrounds, strokes, and fills, it is called a Paint."
  },
  {
    "id": "figma.createPolygon",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createPolygon",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "PolygonNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new polygon (defaults to a triangle)."
  },
  {
    "id": "figma.createRectangle",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createRectangle",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "RectangleNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new rectangle. The behavior is similar to using the `R` shortcut followed by a click."
  },
  {
    "id": "figma.createSection",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createSection",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SectionNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new section"
  },
  {
    "id": "figma.createShapeWithText",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createShapeWithText",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "ShapeWithTextNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in FigJam\n\nCreates a new shape with text."
  },
  {
    "id": "figma.createSlice",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createSlice",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SliceNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new slice object."
  },
  {
    "id": "figma.createSlide",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createSlide",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "row",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "col",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "SlideNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Slides"
  },
  {
    "id": "figma.createSlideRow",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createSlideRow",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "row",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "SlideRowNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Slides\n\nCreates a new Slide Row, which automatically gets appended to the Slide Grid."
  },
  {
    "id": "figma.createStar",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createStar",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "StarNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new star."
  },
  {
    "id": "figma.createSticky",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createSticky",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "StickyNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in FigJam\n\nCreates a new sticky. The behavior is similar to using the `S` shortcut followed by a click."
  },
  {
    "id": "figma.createTable",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createTable",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "numRows",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "numColumns",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "TableNode",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in FigJam\n\nCreates a new table."
  },
  {
    "id": "figma.createText",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createText",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "TextNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new, empty text node."
  },
  {
    "id": "figma.createTextStyle",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createTextStyle",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "TextStyle",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nCreates a new Text style. By default, the text style has the Figma default text properties (font family Inter Regular, font size 12)."
  },
  {
    "id": "figma.createVector",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createVector",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "VectorNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new, empty vector network with no vertices."
  },
  {
    "id": "figma.createVideoAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "createVideoAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "data",
        "type": "Uint8Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<Video>",
    "async": true,
    "deprecated": false,
    "docs": "Creates a `Video` object from the raw bytes of a file content. Like `Image` objects, `Video` objects **are not nodes**. They are handles to images stored by Figma. Frame backgrounds, or fills of shapes (e.g. a rectangle) may contain videos."
  },
  {
    "id": "figma.currentPage.clone",
    "scope": "node",
    "path": "figma.currentPage",
    "interface": "PageNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "PageNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a clone of this page, parented under {@link PluginAPI.root}. Prototyping connections will be copied such that they point to their equivalent in the cloned page. Components will be cloned as instances who master is the original component."
  },
  {
    "id": "figma.currentPage.loadAsync",
    "scope": "node",
    "path": "figma.currentPage",
    "interface": "PageNode",
    "member": "loadAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Loads the contents of the page node."
  },
  {
    "id": "figma.currentPage.off",
    "scope": "node",
    "path": "figma.currentPage",
    "interface": "PageNode",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"nodechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: NodeChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with {@link PageNode.on} or {@link PageNode.once}."
  },
  {
    "id": "figma.currentPage.on",
    "scope": "node",
    "path": "figma.currentPage",
    "interface": "PageNode",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"nodechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: NodeChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers a callback that will be invoked when an event occurs on the page. Current supported events are:\n\n- `\"nodechange\"`: Emitted when a node is added, removed, or updated."
  },
  {
    "id": "figma.currentPage.once",
    "scope": "node",
    "path": "figma.currentPage",
    "interface": "PageNode",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"nodechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: NodeChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as {@link PageNode.on}, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.devResources.off#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.off#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove a handler for the linkpreview, auth, and open events."
  },
  {
    "id": "figma.devResources.on#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.on#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are triggered."
  },
  {
    "id": "figma.devResources.once#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#0",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"linkpreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: LinkPreviewEvent) => LinkPreviewResult | Promise<LinkPreviewResult>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#1",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"auth\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: AuthEvent) => { type: \"AUTH_SUCCESS\"; } | Promise<{ type: \"AUTH_SUCCESS\"; }>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.devResources.once#2",
    "scope": "figma",
    "path": "figma.devResources",
    "interface": "DevResourcesAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"open\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DevResourceOpenEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Create a handler for when the linkpreview, auth, and open events are first triggered. This only gets called once."
  },
  {
    "id": "figma.exclude",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "exclude",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly BaseNode[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "parent",
        "type": "BaseNode & ChildrenMixin",
        "optional": false,
        "rest": false
      },
      {
        "name": "index",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "BooleanOperationNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new {@link BooleanOperationNode} using the EXCLUDE operation using the contents of `nodes`. The arguments to `union` are the same as in {@link PluginAPI.exclude}."
  },
  {
    "id": "figma.flatten",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "flatten",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly BaseNode[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "parent",
        "type": "BaseNode & ChildrenMixin",
        "optional": true,
        "rest": false
      },
      {
        "name": "index",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "VectorNode",
    "async": false,
    "deprecated": false,
    "docs": "Flattens every node in nodes into a new vector network."
  },
  {
    "id": "figma.getCanvasGrid",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getCanvasGrid",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SceneNode[][]",
    "async": false,
    "deprecated": false,
    "docs": "Gets the current canvas grid layout as a 2D array of nodes.\n\nNote: This API is only available in Figma Slides and Figma Buzz"
  },
  {
    "id": "figma.getFileThumbnailNode",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getFileThumbnailNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "FrameNode | ComponentSetNode | ComponentNode | SectionNode",
    "async": false,
    "deprecated": true
  },
  {
    "id": "figma.getFileThumbnailNodeAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getFileThumbnailNodeAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<FrameNode | ComponentSetNode | ComponentNode | SectionNode>",
    "async": true,
    "deprecated": false,
    "docs": "Gets the node that is currently being used for file thumbnail, or null if the default thumbnail is used."
  },
  {
    "id": "figma.getImageByHash",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getImageByHash",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "hash",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Image",
    "async": false,
    "deprecated": false,
    "docs": "This gets the corresponding `Image` object for a given image hash, which can then be used to obtain the bytes of the image. This hash is found in a node's fill property as part of the ImagePaint object. If there is no image with this hash, returns null."
  },
  {
    "id": "figma.getLocalEffectStyles",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalEffectStyles",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "EffectStyle[]",
    "async": false,
    "deprecated": true
  },
  {
    "id": "figma.getLocalEffectStylesAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalEffectStylesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<EffectStyle[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns the list of local effect styles."
  },
  {
    "id": "figma.getLocalGridStyles",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalGridStyles",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "GridStyle[]",
    "async": false,
    "deprecated": true,
    "docs": "Returns the list of local grid styles."
  },
  {
    "id": "figma.getLocalGridStylesAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalGridStylesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<GridStyle[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns the list of local grid styles."
  },
  {
    "id": "figma.getLocalPaintStyles",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalPaintStyles",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "PaintStyle[]",
    "async": false,
    "deprecated": true
  },
  {
    "id": "figma.getLocalPaintStylesAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalPaintStylesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<PaintStyle[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns the list of local paint styles."
  },
  {
    "id": "figma.getLocalTextStyles",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalTextStyles",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "TextStyle[]",
    "async": false,
    "deprecated": true
  },
  {
    "id": "figma.getLocalTextStylesAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getLocalTextStylesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<TextStyle[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns the list of local text styles."
  },
  {
    "id": "figma.getNodeById",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getNodeById",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "BaseNode",
    "async": false,
    "deprecated": true
  },
  {
    "id": "figma.getNodeByIdAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getNodeByIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<BaseNode>",
    "async": true,
    "deprecated": false,
    "docs": "Finds a node by its id in the current document. Every node has an `id` property, which is unique within the document. If the id is invalid, or the node cannot be found (e.g. removed), returns a promise containing null."
  },
  {
    "id": "figma.getSelectionColors",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getSelectionColors",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "{ paints: Paint[]; styles: PaintStyle[]; }",
    "async": false,
    "deprecated": false,
    "docs": "Returns all of the colors in a user’s current selection. This\nreturns the same values that are shown in Figma's native selection\ncolors feature. This can be useful for getting a list of colors and\nstyles in the current selection and converting them into a different\ncode format (like CSS variables for a user’s codebase).\n\nIf there are colors in a selection it will return an object with a\n`paints` property, which is an array of `Paint[]`, and a `styles`\nproperty, which is an array of `PaintStyle[]`.\n\nNote: `getSelectionColors()` returns `null` if there is no selection, or\nif there are too many colors in the selection (>1000)."
  },
  {
    "id": "figma.getSlideGrid",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getSlideGrid",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SlideNode[][]",
    "async": false,
    "deprecated": true,
    "docs": "Note: This API is only available in Figma Slides"
  },
  {
    "id": "figma.getStyleById",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getStyleById",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "BaseStyle",
    "async": false,
    "deprecated": true
  },
  {
    "id": "figma.getStyleByIdAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "getStyleByIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<BaseStyle>",
    "async": true,
    "deprecated": false,
    "docs": "Finds a style by its id in the current document. If not found, returns a promise containing null."
  },
  {
    "id": "figma.group",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "group",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly BaseNode[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "parent",
        "type": "BaseNode & ChildrenMixin",
        "optional": false,
        "rest": false
      },
      {
        "name": "index",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "GroupNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates new group containing all the nodes in `nodes`. There is no `createGroup` function -- use this instead. Group nodes have many quirks, like auto-resizing, that you can read about in the {@link FrameNode} section."
  },
  {
    "id": "figma.importComponentByKeyAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "importComponentByKeyAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<ComponentNode>",
    "async": true,
    "deprecated": false,
    "docs": "Loads a component node from the team library. Promise is rejected if there is no published component with that key or if the request fails."
  },
  {
    "id": "figma.importComponentSetByKeyAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "importComponentSetByKeyAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<ComponentSetNode>",
    "async": true,
    "deprecated": false,
    "docs": "Loads a component set node from the team library. Promise is rejected if there is no published component set with that key or if the request fails."
  },
  {
    "id": "figma.importStyleByKeyAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "importStyleByKeyAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<BaseStyle>",
    "async": true,
    "deprecated": false,
    "docs": "Loads a style from the team library. Promise is rejected if there is no style with that key or if the request fails."
  },
  {
    "id": "figma.intersect",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "intersect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly BaseNode[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "parent",
        "type": "BaseNode & ChildrenMixin",
        "optional": false,
        "rest": false
      },
      {
        "name": "index",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "BooleanOperationNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new {@link BooleanOperationNode} using the INTERSECT operation using the contents of `nodes`. The arguments to `union` are the same as in {@link PluginAPI.intersect}."
  },
  {
    "id": "figma.listAvailableFontsAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "listAvailableFontsAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<Font[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns the lists of currently available fonts. This should be the same list as the one you'd see if you manually used the font picker."
  },
  {
    "id": "figma.loadAllPagesAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "loadAllPagesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Loads all pages of the document into memory. This enables the use of the following features:\n\n- The `documentchange` event for {@link PluginAPI.on}\n- {@link DocumentNode.findAll}\n- {@link DocumentNode.findOne}\n- {@link DocumentNode.findAllWithCriteria}\n- {@link DocumentNode.findWidgetNodesByWidgetId}\n\nCalling this method may be slow for large documents, and should be avoided unless absolutely necessary.\n\nThis method is only necessary if the plugin manifest contains `\"documentAccess\": \"dynamic-page\"`. Without this manifest setting, the full document is loaded automatically when the plugin or widget runs."
  },
  {
    "id": "figma.loadFontAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "loadFontAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "fontName",
        "type": "FontName",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Makes a font available _in the plugin_ for use when creating and modifying text. Calling this function is **necessary** to modify any property of a text node that may cause the rendered text to change, including `.characters`, `.fontSize`, `.fontName`, etc.\n\nYou can either pass in a hardcoded font, a font loaded via `listAvailableFontsAsync`, or the font stored on an existing text node.\n\nRead more about how to work with fonts, when to load them, and how to load them in the [Working with Text](https://developers.figma.com/docs/plugins/working-with-text) page."
  },
  {
    "id": "figma.moveLocalEffectFolderAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalEffectFolderAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetFolder",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain effect styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle} section for more info."
  },
  {
    "id": "figma.moveLocalEffectStyleAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalEffectStyleAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetNode",
        "type": "EffectStyle",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "EffectStyle",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local effect styles."
  },
  {
    "id": "figma.moveLocalGridFolderAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalGridFolderAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetFolder",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain grid styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle} section for more info."
  },
  {
    "id": "figma.moveLocalGridStyleAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalGridStyleAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetNode",
        "type": "GridStyle",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "GridStyle",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local grid styles."
  },
  {
    "id": "figma.moveLocalPaintFolderAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalPaintFolderAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetFolder",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain paint styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle} section for more info."
  },
  {
    "id": "figma.moveLocalPaintStyleAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalPaintStyleAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetNode",
        "type": "PaintStyle",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "PaintStyle",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local paint styles."
  },
  {
    "id": "figma.moveLocalTextFolderAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalTextFolderAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetFolder",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target folder after the specified reference folder (if provided) or to be first in the parent folder if reference is null. The target and reference folders must have the same parent folder. The target and reference folders must contain text styles. When referring to nested folders, the full delimited folder name must be used. See the {@link BaseStyle} section for more info."
  },
  {
    "id": "figma.moveLocalTextStyleAfter",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveLocalTextStyleAfter",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "targetNode",
        "type": "TextStyle",
        "optional": false,
        "rest": false
      },
      {
        "name": "reference",
        "type": "TextStyle",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Note: This API is only available in Figma Design\n\nReorders a target node after the specified reference node (if provided) or to be first if reference is null. The target and reference nodes must live in the same folder. The target and reference nodes must be local text styles."
  },
  {
    "id": "figma.moveNodesToCoord",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "moveNodesToCoord",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodeIds",
        "type": "string[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "rowIndex",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "columnIndex",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Moves the specified nodes to a specific coordinate in the canvas grid.\n\nNote: This API is only available in Figma Slides and Figma Buzz\n\nThis function allows precise positioning of multiple nodes within the\ncanvas grid system used in Slides and Buzz."
  },
  {
    "id": "figma.notify",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "notify",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "message",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "NotificationOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "NotificationHandler",
    "async": false,
    "deprecated": false,
    "docs": "Shows a notification on the bottom of the screen."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.off#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with `figma.on` or `figma.once`."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.on#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers an callback that will be called when an event happens in the editor. Current supported events are:\n- The selection on the current page changed.\n- The current page changed.\n- The document has changed.\n- An object from outside Figma is dropped onto the canvas\n- The plugin has started running.\n- The plugin closed.\n- The plugin has started running.\n- The timer has started running.\n- The timer has paused.\n- The timer has stopped.\n- The timer is done.\n- The timer has resumed."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#0",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "ArgFreeEventType",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "() => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#1",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "\"run\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: RunEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#2",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "type",
        "type": "\"drop\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DropEvent) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#3",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "type",
        "type": "\"documentchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: DocumentChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#4",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "type",
        "type": "\"slidesviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: SlidesViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#5",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "type",
        "type": "\"canvasviewchange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: CanvasViewChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#6",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "type",
        "type": "\"textreview\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: TextReviewEvent) => TextReviewRange[] | Promise<TextReviewRange[]>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.once#7",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 7,
    "parameters": [
      {
        "name": "type",
        "type": "\"stylechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: StyleChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as `figma.on`, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "figma.openExternal",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "openExternal",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "url",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Open a url in a new tab."
  },
  {
    "id": "figma.parameters.off",
    "scope": "figma",
    "path": "figma.parameters",
    "interface": "ParametersAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"input\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: ParameterInputEvent<ParameterValues>) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a handler added via `figma.parameters.on`."
  },
  {
    "id": "figma.parameters.on",
    "scope": "figma",
    "path": "figma.parameters",
    "interface": "ParametersAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"input\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: ParameterInputEvent<ParameterValues>) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Register a handler for user input events in the quick action UI."
  },
  {
    "id": "figma.parameters.once",
    "scope": "figma",
    "path": "figma.parameters",
    "interface": "ParametersAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"input\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: ParameterInputEvent<ParameterValues>) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Register a handler for user input events in the quick action UI. Same as `figma.parameters.on(\"input\")`, but only gets called the first time."
  },
  {
    "id": "figma.payments.getPluginPaymentTokenAsync",
    "scope": "figma",
    "path": "figma.payments",
    "interface": "PaymentsAPI",
    "member": "getPluginPaymentTokenAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<string>",
    "async": true,
    "deprecated": false,
    "docs": "This method generates a token that can be used to securely communicate the\nidentity of the current user on the current plugin or widget. You can\nprovide its returned value as the `plugin_payment_token` query parameter to\nthe [payments REST API](https://developers.figma.com/docs/rest-api/payments) endpoint."
  },
  {
    "id": "figma.payments.getUserFirstRanSecondsAgo",
    "scope": "figma",
    "path": "figma.payments",
    "interface": "PaymentsAPI",
    "member": "getUserFirstRanSecondsAgo",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "number",
    "async": false,
    "deprecated": false,
    "docs": "When the plugin was first run by the current user.\n\nThis is defined as the number of seconds since the current user ran the\nplugin or widget for the first time. This will return 0 the very first time\na user runs your plugin, and will always return 0 when running a plugin in\ndevelopment."
  },
  {
    "id": "figma.payments.initiateCheckoutAsync",
    "scope": "figma",
    "path": "figma.payments",
    "interface": "PaymentsAPI",
    "member": "initiateCheckoutAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "options",
        "type": "{ interstitial?: \"PAID_FEATURE\" | \"TRIAL_ENDED\" | \"SKIP\"; }",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "This triggers a checkout flow in the Figma UI for the user to purchase your\nplugin or widget. The user will be prompted to enter their payment\ninformation and purchase your resource. This function resolves either when\nthe user has completed the checkout flow, or they’ve dismissed it.\n\nWarning: This function will throw an exception in certain cases:\n1. While in query mode and accepting plugin parameters.\n2. During widget rendering. Instead, put calls to this function inside your widget event handlers.\n\nSee [our guide](https://developers.figma.com/docs/plugins/requiring-payment#when-to-call-initiatecheckoutasync) for more information.\n\nThis function takes an `options` argument that controls the behavior of the\ncheckout flow.\n\n```ts\ntype CheckoutOptions = {\n  // This option controls the behavior and copy of the\n  // interstitial checkout modal.\n  //\n  // * PAID_FEATURE:  This is the default. Use this option if\n  //                  you're asking the user to pay for a\n  //                  certain premium feature.\n  //\n  // * TRIAL_ENDED:   Use this option if the user's free trial\n  //                  has ended.\n  //\n  // * SKIP:          Use this option if you want to skip the\n  //                  interstitial entirely. This is useful if\n  //                  you have your own upgrade CTA in your\n  //                  plugin's UI.\n  interstitial?: \"PAID_FEATURE\" | \"TRIAL_ENDED\" | \"SKIP\"\n}\n\n```\n\nAfter `initiateCheckoutAsync` resolves, use `figma.payments.status` to check\nthe user’s payment status."
  },
  {
    "id": "figma.payments.requestCheckout",
    "scope": "figma",
    "path": "figma.payments",
    "interface": "PaymentsAPI",
    "member": "requestCheckout",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "This is useful for [text review plugins](https://developers.figma.com/docs/plugins/textreview-plugins). Since these\nplugins can only run in query mode, they cannot call\n`initiateCheckoutAsync` while a user is editing text as that will throw an\nexception.\n\nif you are building a text review plugin, call `requestCheckout` to\nindicate that the user needs to checkout in order to continue using the\nplugin. When the user exits text editing, they will be prompted to\ncheckout. If the user dismisses the checkout flow, the text review plugin\nwill automatically be disabled."
  },
  {
    "id": "figma.payments.setPaymentStatusInDevelopment",
    "scope": "figma",
    "path": "figma.payments",
    "interface": "PaymentsAPI",
    "member": "setPaymentStatusInDevelopment",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "status",
        "type": "PaymentStatus",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Warning: This method can only be used in development.\n\nThis sets your payment status to the value of the `status` argument in this\nmethod. This is a global setting that will impact your payment status for\nall plugins or widgets you run in development."
  },
  {
    "id": "figma.root.appendChild",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "appendChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "child",
        "type": "PageNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Adds a new page to the end of the `children` array."
  },
  {
    "id": "figma.root.findAll",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "findAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode | SceneNode) => boolean",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "(PageNode | SceneNode)[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the entire document tree. Returns all nodes for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function."
  },
  {
    "id": "figma.root.findAllWithCriteria",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "findAllWithCriteria",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "criteria",
        "type": "FindAllCriteria<T>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "({ type: T[number]; } & (PageNode | SceneNode))[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the entire document tree. Returns all nodes that satisfy all of specified criteria.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function.\n\nSimilar to {@link ChildrenMixin.findAllWithCriteria} with the main difference being that this searches all the nodes in the document, which also includes {@link PageNode} objects."
  },
  {
    "id": "figma.root.findChild",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "findChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PageNode",
    "async": false,
    "deprecated": false,
    "docs": "Searches the immediate children of this node (i.e. all page nodes, not including their children). Returns the first page for which `callback` returns true."
  },
  {
    "id": "figma.root.findChildren",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "findChildren",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode) => boolean",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "PageNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the immediate children of this node (i.e. all page nodes, not including their children). Returns all pages for which `callback` returns true."
  },
  {
    "id": "figma.root.findOne",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "findOne",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode | SceneNode) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PageNode | SceneNode",
    "async": false,
    "deprecated": false,
    "docs": "Searches this entire page (this node's children, its children's children, etc.). Returns the first node for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function."
  },
  {
    "id": "figma.root.findWidgetNodesByWidgetId",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "findWidgetNodesByWidgetId",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "widgetId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "WidgetNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the entire document tree. Returns all widget nodes that match the provided `widgetId`.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function."
  },
  {
    "id": "figma.root.insertChild",
    "scope": "node",
    "path": "figma.root",
    "interface": "DocumentNode",
    "member": "insertChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "index",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "child",
        "type": "PageNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Adds a new page at the specified index in the `children` array."
  },
  {
    "id": "figma.saveVersionHistoryAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "saveVersionHistoryAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "title",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "description",
        "type": "string",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<VersionHistoryResult>",
    "async": true,
    "deprecated": false,
    "docs": "Saves a new version of the file and adds it to the version history of the file. Returns the new version id."
  },
  {
    "id": "figma.setCanvasGrid",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "setCanvasGrid",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "canvasGrid",
        "type": "SceneNode[][]",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sets the canvas grid layout, reorganizing nodes in the canvas.\n\nNote: This API is only available in Figma Slides and Figma Buzz"
  },
  {
    "id": "figma.setCurrentPageAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "setCurrentPageAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "page",
        "type": "PageNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Switch the active page to the specified {@link PageNode}."
  },
  {
    "id": "figma.setFileThumbnailNodeAsync",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "setFileThumbnailNodeAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "FrameNode | ComponentSetNode | ComponentNode | SectionNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set `node` to be the thumbnail for the file. If `node` is null, then use the default thumbnail."
  },
  {
    "id": "figma.setSlideGrid",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "setSlideGrid",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "slideGrid",
        "type": "SlideNode[][]",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Note: This API is only available in Figma Slides"
  },
  {
    "id": "figma.showUI",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "showUI",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "html",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "ShowUIOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Enables you to render UI to interact with the user, or simply to access browser APIs. This function creates a modal dialog with an `<iframe>` containing the HTML markup in the `html` argument."
  },
  {
    "id": "figma.subtract",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "subtract",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly BaseNode[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "parent",
        "type": "BaseNode & ChildrenMixin",
        "optional": false,
        "rest": false
      },
      {
        "name": "index",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "BooleanOperationNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new {@link BooleanOperationNode} using the SUBTRACT operation using the contents of `nodes`. The arguments to `union` are the same as in {@link PluginAPI.subtract}."
  },
  {
    "id": "figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync",
    "scope": "figma",
    "path": "figma.teamLibrary",
    "interface": "TeamLibraryAPI",
    "member": "getAvailableLibraryVariableCollectionsAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<LibraryVariableCollection[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns a descriptor of all {@link VariableCollection}s that exist in the enabled libraries of the current file. Rejects if the request fails.\n\nNote: This requires that users enable libraries that contain variables via the UI. Currently it is not possible to enable libraries via the Plugin API."
  },
  {
    "id": "figma.teamLibrary.getVariablesInLibraryCollectionAsync",
    "scope": "figma",
    "path": "figma.teamLibrary",
    "interface": "TeamLibraryAPI",
    "member": "getVariablesInLibraryCollectionAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "libraryCollectionKey",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<LibraryVariable[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns a descriptor of all {@link Variable}s that exist in a given {@link LibraryVariableCollection}.\nRejects if the given variable collection does not exist, or if the current user\ndoes not have access to that variable collection's library, or if the request fails."
  },
  {
    "id": "figma.textreview.requestToBeDisabledAsync",
    "scope": "figma",
    "path": "figma.textreview",
    "interface": "TextReviewAPI",
    "member": "requestToBeDisabledAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "This method will disable the plugin as a text review plugin if it is enabled. The promise will resolve if it has been successfully been disabled and reject if it wasn’t enabled in the first place."
  },
  {
    "id": "figma.textreview.requestToBeEnabledAsync",
    "scope": "figma",
    "path": "figma.textreview",
    "interface": "TextReviewAPI",
    "member": "requestToBeEnabledAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "This method will request your plugin to be enabled as a text review plugin for the user.\nA modal will pop up that will ask the user if they want to enable the plugin for text review.\nThe promise returned by the function will be resolved if the user accepts in the dialog and will be rejected if the user cancels.\nNote that to prevent spam the promise will be auto rejected if the user cancels the request multiple times in a given plugin run.\n\n![Dialog box that shows when you call the function](https://static.figma.com/uploads/ee33919763431eb2520074650fddfaa904c7e9c1)"
  },
  {
    "id": "figma.triggerUndo",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "triggerUndo",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Triggers an undo action. Reverts to the last `commitUndo()` state."
  },
  {
    "id": "figma.ui.close",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "close",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Destroys the UI and its containing `<iframe>`. Once this has been called, the code inside the iframe will be stopped and you can no longer send messages to and from it."
  },
  {
    "id": "figma.ui.getPosition",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "getPosition",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "{ windowSpace: Vector; canvasSpace: Vector; }",
    "async": false,
    "deprecated": false,
    "docs": "Fetches the position of the UI in window space and canvas space. Throws an error when no UI is available."
  },
  {
    "id": "figma.ui.hide",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "hide",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Hides the current UI. The UI will still continue to run code and be able to send and receive messages. However, it is not rendered to the user."
  },
  {
    "id": "figma.ui.off",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"message\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "MessageEventHandler",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a handler added via `figma.ui.on`."
  },
  {
    "id": "figma.ui.on",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"message\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "MessageEventHandler",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Register a handler for incoming messages from the UI's `<iframe>` window."
  },
  {
    "id": "figma.ui.once",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"message\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "MessageEventHandler",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Register a handler for incoming messages from the UI's `<iframe>` window. Same as `figma.ui.on(\"message\")`, but only gets called the first time."
  },
  {
    "id": "figma.ui.postMessage",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "postMessage",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "pluginMessage",
        "type": "any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "UIPostMessageOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sends a message to the UI's `<iframe>` window."
  },
  {
    "id": "figma.ui.reposition",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "reposition",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "x",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "y",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Changes the position of the UI, after it has been created. Note that the position can also be set in the initial options."
  },
  {
    "id": "figma.ui.resize",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "resize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Changes the size of the UI, after it has been created. Note that the size can also be set in the initial options. The minimum size is 70x0."
  },
  {
    "id": "figma.ui.show",
    "scope": "figma",
    "path": "figma.ui",
    "interface": "UIAPI",
    "member": "show",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Makes the plugin's UI visible. Use this to show the UI if it was created using `figma.showUI(..., { visible: false })`, or after a call to `figma.ui.hide()`."
  },
  {
    "id": "figma.ungroup",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "ungroup",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode & ChildrenMixin",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SceneNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Ungroups the given `node`, moving all of `node`'s children into `node`'s parent and removing `node`. Returns an array of nodes that were children of `node`."
  },
  {
    "id": "figma.union",
    "scope": "figma",
    "path": "figma",
    "interface": "PluginAPI",
    "member": "union",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly BaseNode[]",
        "optional": false,
        "rest": false
      },
      {
        "name": "parent",
        "type": "BaseNode & ChildrenMixin",
        "optional": false,
        "rest": false
      },
      {
        "name": "index",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "BooleanOperationNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new {@link BooleanOperationNode} using the UNION operation using the contents of `nodes`. The arguments to `union` are the same as in {@link PluginAPI.group}."
  },
  {
    "id": "figma.util.normalizeMarkdown",
    "scope": "figma",
    "path": "figma.util",
    "interface": "UtilAPI",
    "member": "normalizeMarkdown",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "markdown",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "Normalizes the markdown string to verify what markdown will render with Figma's rich-text editors.\n\nExamples:\n\n```ts\nconst md = \"# Hello, world!\\n\\nThis is a **bold** text.\"\nconst normalizedMd = figma.util.normalizeMarkdown(md);\n\n// Set an component description with descriptionMarkdown\ncomponent.descriptionMarkdown = normalizedMd;\n```"
  },
  {
    "id": "figma.util.rgb",
    "scope": "figma",
    "path": "figma.util",
    "interface": "UtilAPI",
    "member": "rgb",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "color",
        "type": "string | RGB | RGBA",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "RGB",
    "async": false,
    "deprecated": false,
    "docs": "Creates an `RGB` color object from a variety of common color encodings.\n\n**Note**: since `RGB` colors are primarily used for creating `SolidPaint` objects, you might want to use {@link UtilAPI.solidPaint} instead.\n\nAccepted color formats include CSS color strings with hex, `rgb()`, `hsl()`, or `lab()` encodings, as well as `RGB` and `RGBA` objects. Alpha values in the input will be ignored. If a string encoding cannot be parsed, an error will be thrown.\n\nExamples:\n\n```ts\nconst color1 = figma.util.rgb('#FF00FF')\nconst color2 = figma.util.rgb('hsl(25% 50% 75%)')\n```\n\nYou can alias this function for more concise code:\n\n```ts\nconst rgb = figma.util.rgb\nconst color = rgb('#FF00FF')\n```"
  },
  {
    "id": "figma.util.rgba",
    "scope": "figma",
    "path": "figma.util",
    "interface": "UtilAPI",
    "member": "rgba",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "color",
        "type": "string | RGB | RGBA",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "RGBA",
    "async": false,
    "deprecated": false,
    "docs": "Creates an `RGBA` color object from a variety of common color encodings.\n\nAccepted color formats include CSS color strings with hex, `rgb()`, `hsl()`, or `lab()` encodings, as well as `RGB` and `RGBA` objects. Alpha defaults to 1 (opaque) if not provided in the input. If a string encoding cannot be parsed, an error will be thrown.\n\nExamples:\n\n```ts\nconst layoutGrid = {\n  pattern: 'GRID',\n  sectionSize: 1,\n  color: figma.util.rgba('rgb(25% 25% 25% / 0.5)')\n}\n```\n\nYou can alias this function for more concise code:\n\n```ts\nconst rgba = figma.util.rgba\nconst color = rgba('rgb(25% 25% 25% / 0.5)')\n```"
  },
  {
    "id": "figma.util.solidPaint",
    "scope": "figma",
    "path": "figma.util",
    "interface": "UtilAPI",
    "member": "solidPaint",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "color",
        "type": "string | RGB | RGBA",
        "optional": false,
        "rest": false
      },
      {
        "name": "overrides",
        "type": "Partial<SolidPaint>",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "SolidPaint",
    "async": false,
    "deprecated": false,
    "docs": "Creates a `SolidPaint` object, assigning color and opacity from a variety of common color encodings.\n\nAccepted color formats include CSS color strings with hex, `rgb()`, `hsl()`, or `lab()` encodings, as well as `RGB` and `RGBA` objects. The resulting alpha value will be applied to the `SolidPaint`'s `opacity` property, which defaults to 1 (opaque) if not specified. If a string encoding cannot be parsed, an error will be thrown.\n\nOptionally, you can provide a set of overrides for any of the non-color properties of the `SolidPaint` object. This is useful for modifying the color of an existing `SolidPaint` while preserving its other properties.\n\nExamples:\n\n```ts\n// Set the current page background to red\nfigma.currentPage.backgrounds = [figma.util.solidPaint(\"#FF0000\")]\n\n// Modify an existing SolidPaint with new color and opacity\nif (node.fills[0].type === 'SOLID') {\n  const updated = figma.util.solidPaint('#FF00FF88', node.fills[0])\n}\n```\n\nYou can alias this function for more concise code:\n\n```ts\nconst solidPaint = figma.util.solidPaint\n\n// Set the current page background to red\nfigma.currentPage.backgrounds = [solidPaint(\"#FF0000\")]\n\n// Modify an existing SolidPaint with new color and opacity\nif (node.fills[0].type === 'SOLID') {\n  const updated = solidPaint('#FF00FF88', node.fills[0])\n}\n```"
  },
  {
    "id": "figma.variables.createVariable#0",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "createVariable",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "name",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "collectionId",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "resolvedType",
        "type": "VariableResolvedDataType",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Variable",
    "async": false,
    "deprecated": true,
    "docs": "Creates a variable with a given name and resolved type inside a collection."
  },
  {
    "id": "figma.variables.createVariable#0",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "createVariable",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "name",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "collectionId",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "resolvedType",
        "type": "VariableResolvedDataType",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Variable",
    "async": false,
    "deprecated": true,
    "docs": "Creates a variable with a given name and resolved type inside a collection."
  },
  {
    "id": "figma.variables.createVariable#1",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "createVariable",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "name",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "collection",
        "type": "VariableCollection",
        "optional": false,
        "rest": false
      },
      {
        "name": "resolvedType",
        "type": "VariableResolvedDataType",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Variable",
    "async": false,
    "deprecated": false,
    "docs": "Creates a variable with a given name and resolved type inside a collection."
  },
  {
    "id": "figma.variables.createVariable#1",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "createVariable",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "name",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "collection",
        "type": "VariableCollection",
        "optional": false,
        "rest": false
      },
      {
        "name": "resolvedType",
        "type": "VariableResolvedDataType",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Variable",
    "async": false,
    "deprecated": false,
    "docs": "Creates a variable with a given name and resolved type inside a collection."
  },
  {
    "id": "figma.variables.createVariableAlias",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "createVariableAlias",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "variable",
        "type": "Variable",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "VariableAlias",
    "async": false,
    "deprecated": false,
    "docs": "Helper function to create a variable alias.\n\nThis should be used with functions such as `node.setProperties()` to\nassign component properties to variables."
  },
  {
    "id": "figma.variables.createVariableAliasByIdAsync",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "createVariableAliasByIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "variableId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<VariableAlias>",
    "async": true,
    "deprecated": false,
    "docs": "Helper function to create a variable alias.\n\nThis should be used with functions such as `node.setProperties()` to\nassign component properties to variables."
  },
  {
    "id": "figma.variables.createVariableCollection",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "createVariableCollection",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "name",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "VariableCollection",
    "async": false,
    "deprecated": false,
    "docs": "Creates a new variable collection with the given name."
  },
  {
    "id": "figma.variables.getLocalVariableCollections",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getLocalVariableCollections",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "VariableCollection[]",
    "async": false,
    "deprecated": true,
    "docs": "Returns all local variable collections in the current file."
  },
  {
    "id": "figma.variables.getLocalVariableCollectionsAsync",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getLocalVariableCollectionsAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<VariableCollection[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns all local variable collections in the current file."
  },
  {
    "id": "figma.variables.getLocalVariables",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getLocalVariables",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "VariableResolvedDataType",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Variable[]",
    "async": false,
    "deprecated": true,
    "docs": "Returns all local variables in the current file, optionally filtering by resolved type."
  },
  {
    "id": "figma.variables.getLocalVariablesAsync",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getLocalVariablesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "VariableResolvedDataType",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<Variable[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns all local variables in the current file, optionally filtering by resolved type."
  },
  {
    "id": "figma.variables.getVariableById",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getVariableById",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Variable",
    "async": false,
    "deprecated": true,
    "docs": "Finds a variable by ID. If not found or the provided ID is invalid, returns `null`."
  },
  {
    "id": "figma.variables.getVariableByIdAsync",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getVariableByIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<Variable>",
    "async": true,
    "deprecated": false,
    "docs": "Finds a variable by ID. If not found or the provided ID is invalid, returns a promise containing `null`."
  },
  {
    "id": "figma.variables.getVariableCollectionById",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getVariableCollectionById",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "VariableCollection",
    "async": false,
    "deprecated": true,
    "docs": "Finds a variable collection by ID. If not found or the provided ID is invalid, returns `null`."
  },
  {
    "id": "figma.variables.getVariableCollectionByIdAsync",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "getVariableCollectionByIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<VariableCollection>",
    "async": true,
    "deprecated": false,
    "docs": "Finds a variable collection by ID. If not found or the provided ID is invalid, returns a promise containing `null`."
  },
  {
    "id": "figma.variables.importVariableByKeyAsync",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "importVariableByKeyAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<Variable>",
    "async": true,
    "deprecated": false,
    "docs": "Loads a variable from the team library. Promise is rejected if there is\nno published variable with that key or if the request fails."
  },
  {
    "id": "figma.variables.setBoundVariableForEffect",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "setBoundVariableForEffect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "effect",
        "type": "Effect",
        "optional": false,
        "rest": false
      },
      {
        "name": "field",
        "type": "VariableBindableEffectField",
        "optional": false,
        "rest": false
      },
      {
        "name": "variable",
        "type": "Variable",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Effect",
    "async": false,
    "deprecated": false,
    "docs": "Helper function to bind a variable to an {@link Effect}.\n\nIf `null` is provided as the `variable`, the given `field` will be unbound from any variables."
  },
  {
    "id": "figma.variables.setBoundVariableForLayoutGrid",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "setBoundVariableForLayoutGrid",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "layoutGrid",
        "type": "LayoutGrid",
        "optional": false,
        "rest": false
      },
      {
        "name": "field",
        "type": "VariableBindableLayoutGridField",
        "optional": false,
        "rest": false
      },
      {
        "name": "variable",
        "type": "Variable",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "LayoutGrid",
    "async": false,
    "deprecated": false,
    "docs": "Helper function to bind a variable to a {@link LayoutGrid}.\n\nIf `null` is provided as the `variable`, the given `field` will be unbound from any variables."
  },
  {
    "id": "figma.variables.setBoundVariableForPaint",
    "scope": "figma",
    "path": "figma.variables",
    "interface": "VariablesAPI",
    "member": "setBoundVariableForPaint",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "paint",
        "type": "SolidPaint",
        "optional": false,
        "rest": false
      },
      {
        "name": "field",
        "type": "\"color\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "variable",
        "type": "Variable",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SolidPaint",
    "async": false,
    "deprecated": false,
    "docs": "Helper function to bind a variable to a {@link SolidPaint}.\n\nIf `null` is provided as the `variable`, the given `field` will be unbound from any variables."
  },
  {
    "id": "figma.viewport.scrollAndZoomIntoView",
    "scope": "figma",
    "path": "figma.viewport",
    "interface": "ViewportAPI",
    "member": "scrollAndZoomIntoView",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "readonly BaseNode[]",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Automatically sets the viewport coordinates such that the nodes are visible on screen. It is the equivalent of pressing Shift-1."
  },
  {
    "id": "node.addComponentProperty",
    "scope": "node",
    "path": "node",
    "interface": "ComponentPropertiesMixin",
    "member": "addComponentProperty",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "propertyName",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "type",
        "type": "ComponentPropertyType",
        "optional": false,
        "rest": false
      },
      {
        "name": "defaultValue",
        "type": "string | boolean | VariableAlias",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "ComponentPropertyOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "Adds a new component property to this node and returns the property name with its unique identifier suffixed. This function supports properties with type `'BOOLEAN'`, `'TEXT'`, `'INSTANCE_SWAP'` or `'VARIANT'`."
  },
  {
    "id": "node.addDevResourceAsync",
    "scope": "node",
    "path": "node",
    "interface": "DevResourcesMixin",
    "member": "addDevResourceAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "url",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "name",
        "type": "string",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Adds a dev resource to a node. This will fail if the node already has a dev resource with the same url."
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "addEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | AddEventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n\nThe options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n\nWhen set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n\nWhen set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.\n\nWhen set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.\n\nIf an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.\n\nThe event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)"
  },
  {
    "id": "node.addMeasurement",
    "scope": "node",
    "path": "node",
    "interface": "MeasurementsMixin",
    "member": "addMeasurement",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "{ node: SceneNode; side: MeasurementSide; }",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "{ node: SceneNode; side: MeasurementSide; }",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "{ offset?: MeasurementOffset; freeText?: string; }",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Measurement",
    "async": false,
    "deprecated": false,
    "docs": "Adds a measurement between two nodes in the current page.\n\nMeasurements are always between a start and end node. The side indicates which edge of the node to draw the measurement from.\n\nMeasurements can only go on the same axis, i.e. from side `\"LEFT\"` -> `\"LEFT\"`, `\"LEFT\"` -> `\"RIGHT\"`, `\"TOP\"` -> `\"BOTTOM\"` etc. But not `\"LEFT\"` -> `\"TOP\"`.\n\nSee the [Measurement type](https://developers.figma.com/docs/plugins/api/Measurement) for usage examples.\n\nNote: This method is only available in Dev Mode. You can check the editor type of your plugin to know if the user is in Dev Mode or not:\n\n```ts\nif (figma.editorType === 'dev') {\n  // In Figma's Dev Mode\n}\n```"
  },
  {
    "id": "node.after",
    "scope": "node",
    "path": "node",
    "interface": "ChildNode",
    "member": "after",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "(string | Node)[]",
        "optional": false,
        "rest": true
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/after)"
  },
  {
    "id": "node.append",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "append",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "(string | Node)[]",
        "optional": false,
        "rest": true
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/append)"
  },
  {
    "id": "node.appendChild",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "appendChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "T",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "T",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/appendChild)"
  },
  {
    "id": "node.appendChild",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "appendChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "child",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Adds a new child to the end of the {@link ChildrenMixin.children} array. That is, visually on top of all other children.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.appendChild",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "appendChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "child",
        "type": "PageNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Adds a new page to the end of the `children` array."
  },
  {
    "id": "node.appendChildAt",
    "scope": "node",
    "path": "node",
    "interface": "GridLayoutMixin",
    "member": "appendChildAt",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "rowIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "columnIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Applicable only on auto-layout frames with `layoutMode` set to `\"GRID\"`.\nAppends a node to the grid at the specified row and column index."
  },
  {
    "id": "node.before",
    "scope": "node",
    "path": "node",
    "interface": "ChildNode",
    "member": "before",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "(string | Node)[]",
        "optional": false,
        "rest": true
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/before)"
  },
  {
    "id": "node.cellAt",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "cellAt",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "rowIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "columnIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "TableCellNode",
    "async": false,
    "deprecated": false,
    "docs": "Returns the table cell node at a specific cell coordinate."
  },
  {
    "id": "node.clearExplicitVariableModeForCollection#0",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "clearExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "collectionId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Clears an explicit mode for the given collection on this node"
  },
  {
    "id": "node.clearExplicitVariableModeForCollection#0",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "clearExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "collectionId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Clears an explicit mode for the given collection on this node"
  },
  {
    "id": "node.clearExplicitVariableModeForCollection#1",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "clearExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "collection",
        "type": "VariableCollection",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Clears an explicit mode for the given collection on this node"
  },
  {
    "id": "node.clearExplicitVariableModeForCollection#1",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "clearExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "collection",
        "type": "VariableCollection",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Clears an explicit mode for the given collection on this node"
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "PageNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "PageNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a clone of this page, parented under {@link PluginAPI.root}. Prototyping connections will be copied such that they point to their equivalent in the cloned page. Components will be cloned as instances who master is the original component."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "FrameNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "FrameNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the frame node. By default, the duplicate will be parented under `figma.currentPage`. Nested components will be cloned as instances who master is the original component."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "GroupNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "GroupNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the group node. By default, the duplicate will be parented under `figma.currentPage`. Nested components will be cloned as instances who master is the original component."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "TransformGroupNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "TransformGroupNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the transform group node. By default, the duplicate will be parented under `figma.currentPage`. Nested components will be cloned as instances who master is the original component."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "SliceNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SliceNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the slice node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "RectangleNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "RectangleNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the rectangle node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "LineNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "LineNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the line node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "EllipseNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "EllipseNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the ellipse node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "PolygonNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "PolygonNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the polygon node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "StarNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "StarNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the star node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "VectorNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "VectorNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the vector node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "TextNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "TextNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the text node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "TextPathNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "TextPathNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the text path node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "ComponentSetNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "ComponentSetNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the component set as a new component set. Its children will be duplicated as **new** components with no instances of them. By default, the duplicate will be parented under figma.currentPage."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "ComponentNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "ComponentNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the component node as a **new** component with no instances of it. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "InstanceNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "InstanceNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the instance node. The new instance has the same main component. By default, the duplicate's parent is `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "BooleanOperationNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "BooleanOperationNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the boolean operation node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "StickyNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "StickyNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "StampNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "StampNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "TableNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "HighlightNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "HighlightNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the highlight node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "WashiTapeNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "WashiTapeNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the washi tape node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "ShapeWithTextNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "ShapeWithTextNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "CodeBlockNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "CodeBlockNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "ConnectorNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "ConnectorNode",
    "async": false,
    "deprecated": false,
    "docs": "Duplicates the node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "WidgetNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "WidgetNode",
    "async": false,
    "deprecated": false,
    "docs": "Create an identical copy of this WidgetNode. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "EmbedNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "EmbedNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this node"
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "LinkUnfurlNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "LinkUnfurlNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this node"
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "MediaNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "MediaNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "SectionNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SectionNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "SlideNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SlideNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "SlideRowNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SlideRowNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "SlideGridNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SlideGridNode",
    "async": false,
    "deprecated": false,
    "docs": "You cannot make a copy of a slide grid node and calling this method throw a runtime exception."
  },
  {
    "id": "node.clone",
    "scope": "node",
    "path": "node",
    "interface": "InteractiveSlideElementNode",
    "member": "clone",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "InteractiveSlideElementNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this node. By default, the duplicate will be parented under `figma.currentPage`."
  },
  {
    "id": "node.cloneNode",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "cloneNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "subtree",
        "type": "boolean",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Node",
    "async": false,
    "deprecated": false,
    "docs": "Returns a copy of node. If deep is true, the copy also includes the node's descendants.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/cloneNode)"
  },
  {
    "id": "node.cloneWidget",
    "scope": "node",
    "path": "node",
    "interface": "WidgetNode",
    "member": "cloneWidget",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "syncedStateOverrides",
        "type": "{ [name: string]: any; }",
        "optional": false,
        "rest": false
      },
      {
        "name": "syncedMapOverrides",
        "type": "{ [mapName: string]: { [key: string]: any; }; }",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "WidgetNode",
    "async": false,
    "deprecated": false,
    "docs": "Create a copy of this WidgetNode while overriding specific synced state & synced map values for the widget.\nOverrides are only applied if a widget is cloning itself or other widgets created by the same `manifest.id`."
  },
  {
    "id": "node.compareDocumentPosition",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "compareDocumentPosition",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "other",
        "type": "Node",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "number",
    "async": false,
    "deprecated": false,
    "docs": "Returns a bitmask indicating the position of other relative to node.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/compareDocumentPosition)"
  },
  {
    "id": "node.connect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "connect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "AudioNode",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/connect)"
  },
  {
    "id": "node.connect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "connect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "AudioNode",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/connect)"
  },
  {
    "id": "node.connect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "connect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/connect)"
  },
  {
    "id": "node.connect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "connect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/connect)"
  },
  {
    "id": "node.contains",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "contains",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "other",
        "type": "Node",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "boolean",
    "async": false,
    "deprecated": false,
    "docs": "Returns true if other is an inclusive descendant of node, and false otherwise.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/contains)"
  },
  {
    "id": "node.createInstance",
    "scope": "node",
    "path": "node",
    "interface": "ComponentNode",
    "member": "createInstance",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "InstanceNode",
    "async": false,
    "deprecated": false,
    "docs": "Creates an instance of this component. By default, the instance will be parented under `figma.currentPage`."
  },
  {
    "id": "node.deleteCharacters",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "deleteCharacters",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Remove characters in the text from `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.deleteComponentProperty",
    "scope": "node",
    "path": "node",
    "interface": "ComponentPropertiesMixin",
    "member": "deleteComponentProperty",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "propertyName",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Deletes an existing component property on this node. This function only supports properties with type `'BOOLEAN'`, `'TEXT'`, or `'INSTANCE_SWAP'`."
  },
  {
    "id": "node.deleteDevResourceAsync",
    "scope": "node",
    "path": "node",
    "interface": "DevResourcesMixin",
    "member": "deleteDevResourceAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "url",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Deletes a dev resource on a node. This will fail if the node does not have a dev resource with the same url."
  },
  {
    "id": "node.deleteMeasurement",
    "scope": "node",
    "path": "node",
    "interface": "MeasurementsMixin",
    "member": "deleteMeasurement",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Delete a measurement.\n\nSee the [Measurement type](https://developers.figma.com/docs/plugins/api/Measurement) for usage examples.\n\nNote: This method is only available in Dev Mode. You can check the editor type of your plugin to know if the user is in Dev Mode or not:\n\n```ts\nif (figma.editorType === 'dev') {\n  // In Figma's Dev Mode\n}\n```"
  },
  {
    "id": "node.detachInstance",
    "scope": "node",
    "path": "node",
    "interface": "InstanceNode",
    "member": "detachInstance",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "FrameNode",
    "async": false,
    "deprecated": false,
    "docs": "Detaches the given instance from its component.  Returns the frame node that results from detaching the instance. For nested instances (instances inside of other instances), also detaches all ancestors nodes that\nare instances."
  },
  {
    "id": "node.disconnect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#2",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#2",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#2",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#2",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#2",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#2",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#2",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#3",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#3",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#3",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#3",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#3",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#3",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#3",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#4",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#4",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#4",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#4",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#4",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#4",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#4",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "destinationNode",
        "type": "AudioNode",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "input",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#5",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#5",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#5",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#5",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#5",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#5",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#5",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 5,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#6",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#6",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#6",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#6",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#6",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#6",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.disconnect#6",
    "scope": "node",
    "path": "node",
    "interface": "AudioNode",
    "member": "disconnect",
    "kind": "method",
    "overloadIndex": 6,
    "parameters": [
      {
        "name": "destinationParam",
        "type": "AudioParam",
        "optional": false,
        "rest": false
      },
      {
        "name": "output",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)"
  },
  {
    "id": "node.editComponentProperty",
    "scope": "node",
    "path": "node",
    "interface": "ComponentPropertiesMixin",
    "member": "editComponentProperty",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "propertyName",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "newValue",
        "type": "{ name?: string; defaultValue?: string | boolean | VariableAlias; preferredValues?: InstanceSwapPreferredValue[]; }",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "Modifies the name, default value, or preferred values of an existing component property on this node and returns the property name with its unique identifier suffixed.\n\nThis function supports properties with type `'BOOLEAN'`, `'TEXT'`, `'INSTANCE_SWAP'`, or `'VARIANT'` with the following restrictions:\n\n- `name` is supported for all properties\n- `defaultValue` is supported for `'BOOLEAN'`, `'TEXT'`, and `'INSTANCE_SWAP'` properties, but not for `'VARIANT'` properties\n- `preferredValues` is only supported for `'INSTANCE_SWAP'` properties"
  },
  {
    "id": "node.editDevResourceAsync",
    "scope": "node",
    "path": "node",
    "interface": "DevResourcesMixin",
    "member": "editDevResourceAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "currentUrl",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "newValue",
        "type": "{ name?: string; url?: string; }",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Edits a dev resource on a node. This will fail if the node does not have a dev resource with the same url."
  },
  {
    "id": "node.editMeasurement",
    "scope": "node",
    "path": "node",
    "interface": "MeasurementsMixin",
    "member": "editMeasurement",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "id",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "newValue",
        "type": "{ offset?: MeasurementOffset; freeText?: string; }",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Measurement",
    "async": false,
    "deprecated": false,
    "docs": "Edit a measurement’s offset.\n\nSee the [Measurement type](https://developers.figma.com/docs/plugins/api/Measurement) for usage examples.\n\nNote: This method is only available in Dev Mode. You can check the editor type of your plugin to know if the user is in Dev Mode or not:\n\n```ts\nif (figma.editorType === 'dev') {\n  // In Figma's Dev Mode\n}\n```"
  },
  {
    "id": "node.exportAsync#0",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettings",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<Uint8Array<ArrayBufferLike>>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#0",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettings",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<Uint8Array<ArrayBufferLike>>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#0",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettings",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<Uint8Array<ArrayBufferLike>>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#1",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettingsSVGString",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<string>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#1",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettingsSVGString",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<string>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#1",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettingsSVGString",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<string>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#2",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettingsREST",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<Object>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#2",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettingsREST",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<Object>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.exportAsync#2",
    "scope": "node",
    "path": "node",
    "interface": "ExportMixin",
    "member": "exportAsync",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "settings",
        "type": "ExportSettingsREST",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<Object>",
    "async": true,
    "deprecated": false,
    "docs": "Exports the node as an encoded image.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.findAll",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "findAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: SceneNode) => boolean",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "SceneNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches this entire subtree (this node's children, its children's children, etc). Returns all nodes for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.findAll",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "findAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode | SceneNode) => boolean",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "(PageNode | SceneNode)[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the entire document tree. Returns all nodes for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function."
  },
  {
    "id": "node.findAllWithCriteria",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "findAllWithCriteria",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "criteria",
        "type": "FindAllCriteria<T>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "({ type: T[number]; } & SceneNode)[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches this entire subtree (this node's children, its children's children, etc). Returns all nodes that satisfy all of specified criteria.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.findAllWithCriteria",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "findAllWithCriteria",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "criteria",
        "type": "FindAllCriteria<T>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "({ type: T[number]; } & (PageNode | SceneNode))[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the entire document tree. Returns all nodes that satisfy all of specified criteria.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function.\n\nSimilar to {@link ChildrenMixin.findAllWithCriteria} with the main difference being that this searches all the nodes in the document, which also includes {@link PageNode} objects."
  },
  {
    "id": "node.findChild",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "findChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: SceneNode) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SceneNode",
    "async": false,
    "deprecated": false,
    "docs": "Searches the immediate children of this node (i.e. not including the children's children). Returns the first node for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.findChild",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "findChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PageNode",
    "async": false,
    "deprecated": false,
    "docs": "Searches the immediate children of this node (i.e. all page nodes, not including their children). Returns the first page for which `callback` returns true."
  },
  {
    "id": "node.findChildren",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "findChildren",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: SceneNode) => boolean",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "SceneNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the immediate children of this node (i.e. not including the children's children). Returns all nodes for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.findChildren",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "findChildren",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode) => boolean",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "PageNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the immediate children of this node (i.e. all page nodes, not including their children). Returns all pages for which `callback` returns true."
  },
  {
    "id": "node.findOne",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "findOne",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: SceneNode) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SceneNode",
    "async": false,
    "deprecated": false,
    "docs": "Searches this entire subtree (this node's children, its children's children, etc). Returns the first node for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.findOne",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "findOne",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "callback",
        "type": "(node: PageNode | SceneNode) => boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PageNode | SceneNode",
    "async": false,
    "deprecated": false,
    "docs": "Searches this entire page (this node's children, its children's children, etc.). Returns the first node for which `callback` returns true.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function."
  },
  {
    "id": "node.findWidgetNodesByWidgetId",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "findWidgetNodesByWidgetId",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "widgetId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "WidgetNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches this entire subtree (this node's children, its children's children, etc). Returns all widget nodes that match the provided `widgetId`.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.findWidgetNodesByWidgetId",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "findWidgetNodesByWidgetId",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "widgetId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "WidgetNode[]",
    "async": false,
    "deprecated": false,
    "docs": "Searches the entire document tree. Returns all widget nodes that match the provided `widgetId`.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, you must first call {@link PluginAPI.loadAllPagesAsync} to access this function."
  },
  {
    "id": "node.getAuthorAsync",
    "scope": "node",
    "path": "node",
    "interface": "StampNode",
    "member": "getAuthorAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<BaseUser>",
    "async": true,
    "deprecated": false,
    "docs": "Fetches the name, id, and photoUrl of the user that created the Stamp. Note that this can return null\nif the stamp was created before July 2022 or if the user is currently not connected to the internet.\n\n`fileusers` must be specified in the permissions array in `manifest.json` to access this function."
  },
  {
    "id": "node.getByteFrequencyData",
    "scope": "node",
    "path": "node",
    "interface": "AnalyserNode",
    "member": "getByteFrequencyData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "array",
        "type": "Uint8Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteFrequencyData)"
  },
  {
    "id": "node.getByteTimeDomainData",
    "scope": "node",
    "path": "node",
    "interface": "AnalyserNode",
    "member": "getByteTimeDomainData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "array",
        "type": "Uint8Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteTimeDomainData)"
  },
  {
    "id": "node.getCSSAsync",
    "scope": "node",
    "path": "node",
    "interface": "BaseNodeMixin",
    "member": "getCSSAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<{ [key: string]: string; }>",
    "async": true,
    "deprecated": false,
    "docs": "Resolves to a JSON object of CSS properties of the node. This is the same CSS that Figma shows in the inspect panel and is helpful if you are building a [plugin for code generation](https://developers.figma.com/docs/plugins/codegen-plugins)."
  },
  {
    "id": "node.getDevResourcesAsync",
    "scope": "node",
    "path": "node",
    "interface": "DevResourcesMixin",
    "member": "getDevResourcesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "options",
        "type": "{ includeChildren?: boolean; }",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Promise<DevResourceWithNodeId[]>",
    "async": true,
    "deprecated": false,
    "docs": "Gets all of the dev resources on a node. This includes any inherited dev resources from components and component sets."
  },
  {
    "id": "node.getElementById",
    "scope": "node",
    "path": "node",
    "interface": "NonElementParentNode",
    "member": "getElementById",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "elementId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Element",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element within node's descendants whose ID is elementId.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementById)"
  },
  {
    "id": "node.getFloatFrequencyData",
    "scope": "node",
    "path": "node",
    "interface": "AnalyserNode",
    "member": "getFloatFrequencyData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "array",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatFrequencyData)"
  },
  {
    "id": "node.getFloatTimeDomainData",
    "scope": "node",
    "path": "node",
    "interface": "AnalyserNode",
    "member": "getFloatTimeDomainData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "array",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatTimeDomainData)"
  },
  {
    "id": "node.getFrequencyResponse",
    "scope": "node",
    "path": "node",
    "interface": "BiquadFilterNode",
    "member": "getFrequencyResponse",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "frequencyHz",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      },
      {
        "name": "magResponse",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      },
      {
        "name": "phaseResponse",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/getFrequencyResponse)"
  },
  {
    "id": "node.getFrequencyResponse",
    "scope": "node",
    "path": "node",
    "interface": "IIRFilterNode",
    "member": "getFrequencyResponse",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "frequencyHz",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      },
      {
        "name": "magResponse",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      },
      {
        "name": "phaseResponse",
        "type": "Float32Array<ArrayBufferLike>",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode/getFrequencyResponse)"
  },
  {
    "id": "node.getInstancesAsync",
    "scope": "node",
    "path": "node",
    "interface": "ComponentNode",
    "member": "getInstancesAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<InstanceNode[]>",
    "async": true,
    "deprecated": false,
    "docs": "Returns an array of all of the instances of this component in the document."
  },
  {
    "id": "node.getMainComponentAsync",
    "scope": "node",
    "path": "node",
    "interface": "InstanceNode",
    "member": "getMainComponentAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<ComponentNode>",
    "async": true,
    "deprecated": false,
    "docs": "The component that this instance reflects. This could be a remote, read-only component. This can be set to turn this instance into a different component. On nested instances (instances inside other instances), setting this value clears all overrides and performs nested instance swapping."
  },
  {
    "id": "node.getMeasurements",
    "scope": "node",
    "path": "node",
    "interface": "MeasurementsMixin",
    "member": "getMeasurements",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Measurement[]",
    "async": false,
    "deprecated": false,
    "docs": "Get all measurements in the current page.\n\nLearn more about measurements in the [Help Center](https://help.figma.com/hc/en-us/articles/20774752502935)."
  },
  {
    "id": "node.getMeasurementsForNode",
    "scope": "node",
    "path": "node",
    "interface": "MeasurementsMixin",
    "member": "getMeasurementsForNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Measurement[]",
    "async": false,
    "deprecated": false,
    "docs": "Get all measurements pointing to a node in the current page. This includes all measurements whose start _or_ end node is the node passed in."
  },
  {
    "id": "node.getPluginData",
    "scope": "node",
    "path": "node",
    "interface": "PluginDataMixin",
    "member": "getPluginData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "Retrieves custom information that was stored on this node or style using {@link PluginDataMixin.setPluginData}. If there is no data stored for the provided key, an empty string is returned."
  },
  {
    "id": "node.getPluginDataKeys",
    "scope": "node",
    "path": "node",
    "interface": "PluginDataMixin",
    "member": "getPluginDataKeys",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "string[]",
    "async": false,
    "deprecated": false,
    "docs": "Retrieves a list of all keys stored on this node or style using using {@link PluginDataMixin.setPluginData}. This enables iterating through all data stored privately on a node or style by your plugin."
  },
  {
    "id": "node.getPublishStatusAsync",
    "scope": "node",
    "path": "node",
    "interface": "PublishableMixin",
    "member": "getPublishStatusAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<PublishStatus>",
    "async": true,
    "deprecated": false,
    "docs": "Gets the status of this style/component in the team library."
  },
  {
    "id": "node.getRangeAllFontNames",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeAllFontNames",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "FontName[]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `fontName`s from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeBoundVariable",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeBoundVariable",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "field",
        "type": "VariableBindableTextField",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "VariableAlias | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `boundVariable` for a given field from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeFills",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeFills",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | Paint[]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `fills` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeFillStyleId",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeFillStyleId",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `fillStyleId` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeFontName",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeFontName",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | FontName",
    "async": false,
    "deprecated": false,
    "docs": "Get the `fontName` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeFontSize",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeFontSize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "number | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `fontSize` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeFontWeight",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeFontWeight",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "number | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `fontWeight` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeHyperlink",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeHyperlink",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | HyperlinkTarget",
    "async": false,
    "deprecated": false,
    "docs": "Get the `hyperlink` from characters in range `start` (inclusive) to `end` (exclusive). Returns a {@link HyperlinkTarget} if the range contains exactly one hyperlink, or `null` if the range contains none."
  },
  {
    "id": "node.getRangeIndentation",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeIndentation",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "number | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `indentation` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeLetterSpacing",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeLetterSpacing",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | LetterSpacing",
    "async": false,
    "deprecated": false,
    "docs": "Get the `letterSpacing` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeLineHeight",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeLineHeight",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | LineHeight",
    "async": false,
    "deprecated": false,
    "docs": "Get the `lineHeight` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeListOptions",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeListOptions",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | TextListOptions",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textListOptions` from characters in range `start` (inclusive) to `end` (exclusive). Returns a {@link TextListOptions}"
  },
  {
    "id": "node.getRangeListSpacing",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeListSpacing",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "number | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `listSpacing` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeOpenTypeFeatures",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeOpenTypeFeatures",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | { readonly PCAP: boolean; readonly C2PC: boolean; readonly CASE: boolean; readonly CPSP: boolean; readonly TITL: boolean; readonly UNIC: boolean; readonly ZERO: boolean; readonly SINF: boolean; readonly ORDN: boolean; readonly AFRC: boolean; readonly DNOM: boolean; readonly NUMR: boolean; readonly LIGA: boolean; readonly CLIG: boolean; readonly DLIG: boolean; readonly HLIG: boolean; readonly RLIG: boolean; readonly AALT: boolean; readonly CALT: boolean; readonly RCLT: boolean; readonly SALT: boolean; readonly RVRN: boolean; readonly VERT: boolean; readonly SWSH: boolean; readonly CSWH: boolean; readonly NALT: boolean; readonly CCMP: boolean; readonly STCH: boolean; readonly HIST: boolean; readonly SIZE: boolean; readonly ORNM: boolean; readonly ITAL: boolean; readonly RAND: boolean; readonly DTLS: boolean; readonly FLAC: boolean; readonly MGRK: boolean; readonly SSTY: boolean; readonly KERN: boolean; readonly FWID: boolean; readonly HWID: boolean; readonly HALT: boolean; readonly TWID: boolean; readonly QWID: boolean; readonly PWID: boolean; readonly JUST: boolean; readonly LFBD: boolean; readonly OPBD: boolean; readonly RTBD: boolean; readonly PALT: boolean; readonly PKNA: boolean; readonly LTRA: boolean; readonly LTRM: boolean; readonly RTLA: boolean; readonly RTLM: boolean; readonly ABRV: boolean; readonly ABVM: boolean; readonly ABVS: boolean; readonly VALT: boolean; readonly VHAL: boolean; readonly BLWF: boolean; readonly BLWM: boolean; readonly BLWS: boolean; readonly AKHN: boolean; readonly CJCT: boolean; readonly CFAR: boolean; readonly CPCT: boolean; readonly CURS: boolean; readonly DIST: boolean; readonly EXPT: boolean; readonly FALT: boolean; readonly FINA: boolean; readonly FIN2: boolean; readonly FIN3: boolean; readonly HALF: boolean; readonly HALN: boolean; readonly HKNA: boolean; readonly HNGL: boolean; readonly HOJO: boolean; readonly INIT: boolean; readonly ISOL: boolean; readonly JP78: boolean; readonly JP83: boolean; readonly JP90: boolean; readonly JP04: boolean; readonly LJMO: boolean; readonly LOCL: boolean; readonly MARK: boolean; readonly MEDI: boolean; readonly MED2: boolean; readonly MKMK: boolean; readonly NLCK: boolean; readonly NUKT: boolean; readonly PREF: boolean; readonly PRES: boolean; readonly VPAL: boolean; readonly PSTF: boolean; readonly PSTS: boolean; readonly RKRF: boolean; readonly RPHF: boolean; readonly RUBY: boolean; readonly SMPL: boolean; readonly TJMO: boolean; readonly TNAM: boolean; readonly TRAD: boolean; readonly VATU: boolean; readonly VJMO: boolean; readonly VKNA: boolean; readonly VKRN: boolean; readonly VRTR: boolean; readonly VRT2: boolean; readonly SS01: boolean; readonly SS02: boolean; readonly SS03: boolean; readonly SS04: boolean; readonly SS05: boolean; readonly SS06: boolean; readonly SS07: boolean; readonly SS08: boolean; readonly SS09: boolean; readonly SS10: boolean; readonly SS11: boolean; readonly SS12: boolean; readonly SS13: boolean; readonly SS14: boolean; readonly SS15: boolean; readonly SS16: boolean; readonly SS17: boolean; readonly SS18: boolean; readonly SS19: boolean; readonly SS20: boolean; readonly CV01: boolean; readonly CV02: boolean; readonly CV03: boolean; readonly CV04: boolean; readonly CV05: boolean; readonly CV06: boolean; readonly CV07: boolean; readonly CV08: boolean; readonly CV09: boolean; readonly CV10: boolean; readonly CV11: boolean; readonly CV12: boolean; readonly CV13: boolean; readonly CV14: boolean; readonly CV15: boolean; readonly CV16: boolean; readonly CV17: boolean; readonly CV18: boolean; readonly CV19: boolean; readonly CV20: boolean; readonly CV21: boolean; readonly CV22: boolean; readonly CV23: boolean; readonly CV24: boolean; readonly CV25: boolean; readonly CV26: boolean; readonly CV27: boolean; readonly CV28: boolean; readonly CV29: boolean; readonly CV30: boolean; readonly CV31: boolean; readonly CV32: boolean; readonly CV33: boolean; readonly CV34: boolean; readonly CV35: boolean; readonly CV36: boolean; readonly CV37: boolean; readonly CV38: boolean; readonly CV39: boolean; readonly CV40: boolean; readonly CV41: boolean; readonly CV42: boolean; readonly CV43: boolean; readonly CV44: boolean; readonly CV45: boolean; readonly CV46: boolean; readonly CV47: boolean; readonly CV48: boolean; readonly CV49: boolean; readonly CV50: boolean; readonly CV51: boolean; readonly CV52: boolean; readonly CV53: boolean; readonly CV54: boolean; readonly CV55: boolean; readonly CV56: boolean; readonly CV57: boolean; readonly CV58: boolean; readonly CV59: boolean; readonly CV60: boolean; readonly CV61: boolean; readonly CV62: boolean; readonly CV63: boolean; readonly CV64: boolean; readonly CV65: boolean; readonly CV66: boolean; readonly CV67: boolean; readonly CV68: boolean; readonly CV69: boolean; readonly CV70: boolean; readonly CV71: boolean; readonly CV72: boolean; readonly CV73: boolean; readonly CV74: boolean; readonly CV75: boolean; readonly CV76: boolean; readonly CV77: boolean; readonly CV78: boolean; readonly CV79: boolean; readonly CV80: boolean; readonly CV81: boolean; readonly CV82: boolean; readonly CV83: boolean; readonly CV84: boolean; readonly CV85: boolean; readonly CV86: boolean; readonly CV87: boolean; readonly CV88: boolean; readonly CV89: boolean; readonly CV90: boolean; readonly CV91: boolean; readonly CV92: boolean; readonly CV93: boolean; readonly CV94: boolean; readonly CV95: boolean; readonly CV96: boolean; readonly CV97: boolean; readonly CV98: boolean; readonly CV99: boolean; }",
    "async": false,
    "deprecated": false,
    "docs": "Get the {@link BaseNonResizableTextMixin.openTypeFeatures} from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeParagraphIndent",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeParagraphIndent",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "number | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `paragraphIndent` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeParagraphSpacing",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeParagraphSpacing",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "number | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `paragraphSpacing` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextCase",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeTextCase",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | TextCase",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textCase` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextDecoration",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeTextDecoration",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | TextDecoration",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textDecoration` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextDecorationColor",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeTextDecorationColor",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | TextDecorationColor",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textDecorationColor` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextDecorationOffset",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeTextDecorationOffset",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | TextDecorationOffset",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textDecorationOffset` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextDecorationSkipInk",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeTextDecorationSkipInk",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "boolean | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textDecorationSkipInk` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextDecorationStyle",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeTextDecorationStyle",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | TextDecorationStyle",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textDecorationStyle` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextDecorationThickness",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "getRangeTextDecorationThickness",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "PluginAPI[\"mixed\"] | TextDecorationThickness",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textDecorationThickness` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRangeTextStyleId",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getRangeTextStyleId",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string | PluginAPI[\"mixed\"]",
    "async": false,
    "deprecated": false,
    "docs": "Get the `textStyleId` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.getRelaunchData",
    "scope": "node",
    "path": "node",
    "interface": "BaseNodeMixin",
    "member": "getRelaunchData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "{ [command: string]: string; }",
    "async": false,
    "deprecated": false,
    "docs": "Retreives the reluanch data stored on this node using {@link BaseNodeMixin.setRelaunchData}"
  },
  {
    "id": "node.getRootNode",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "getRootNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "options",
        "type": "GetRootNodeOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Node",
    "async": false,
    "deprecated": false,
    "docs": "Returns node's root.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/getRootNode)"
  },
  {
    "id": "node.getSharedPluginData",
    "scope": "node",
    "path": "node",
    "interface": "PluginDataMixin",
    "member": "getSharedPluginData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "namespace",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "Retrieves custom information that was stored on this node or style using {@link PluginDataMixin.setSharedPluginData}. If there is no data stored for the provided namespace and key, an empty string is returned."
  },
  {
    "id": "node.getSharedPluginDataKeys",
    "scope": "node",
    "path": "node",
    "interface": "PluginDataMixin",
    "member": "getSharedPluginDataKeys",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "namespace",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string[]",
    "async": false,
    "deprecated": false,
    "docs": "Retrieves a list of all keys stored on this node or style using {@link PluginDataMixin.setSharedPluginData}. This enables iterating through all data stored in a given namespace."
  },
  {
    "id": "node.getSlideTransition",
    "scope": "node",
    "path": "node",
    "interface": "SlideNode",
    "member": "getSlideTransition",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "SlideTransition",
    "async": false,
    "deprecated": false,
    "docs": "Get the {@link SlideTransition} of the slide node."
  },
  {
    "id": "node.getStyleConsumersAsync",
    "scope": "node",
    "path": "node",
    "interface": "BaseStyleMixin",
    "member": "getStyleConsumersAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<StyleConsumers[]>",
    "async": true,
    "deprecated": false,
    "docs": "The consumers of this style. The `fields` in `StyleConsumers` refers to the field where the style is applied (e.g. a PaintStyle can be applied in `setFillStyleIdAsync` or `setStrokeStyleIdAsync`)."
  },
  {
    "id": "node.getStyledTextSegments",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "getStyledTextSegments",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "fields",
        "type": "StyledTextSegmentFields",
        "optional": false,
        "rest": false
      },
      {
        "name": "start",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "Pick<StyledTextSegment, \"characters\" | StyledTextSegmentFields[number] | \"start\" | \"end\">[]",
    "async": false,
    "deprecated": false,
    "docs": "Get text segments along with the desired text properties (font size, text case, etc...)"
  },
  {
    "id": "node.getTopLevelFrame",
    "scope": "node",
    "path": "node",
    "interface": "BaseNodeMixin",
    "member": "getTopLevelFrame",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "FrameNode",
    "async": false,
    "deprecated": false,
    "docs": "Returns the top-most frame that contains this node. If the node is not inside a frame, this will return undefined.\n\nNote: This function will only work in Figma Design and will throw an error if called in FigJam or Slides."
  },
  {
    "id": "node.hasChildNodes",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "hasChildNodes",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "boolean",
    "async": false,
    "deprecated": false,
    "docs": "Returns whether node has children.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/hasChildNodes)"
  },
  {
    "id": "node.insertBefore",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "insertBefore",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "T",
        "optional": false,
        "rest": false
      },
      {
        "name": "child",
        "type": "Node",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "T",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/insertBefore)"
  },
  {
    "id": "node.insertCharacters",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "insertCharacters",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "characters",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "useStyle",
        "type": "\"BEFORE\" | \"AFTER\"",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Insert `characters` at index `start` in the text."
  },
  {
    "id": "node.insertChild",
    "scope": "node",
    "path": "node",
    "interface": "ChildrenMixin",
    "member": "insertChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "index",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "child",
        "type": "SceneNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Adds a new child at the specified index in the {@link ChildrenMixin.children} array.\n\nIf the manifest contains `\"documentAccess\": \"dynamic-page\"`, **and** the node is a {@link PageNode}, you must first call {@link PageNode.loadAsync} to access this function."
  },
  {
    "id": "node.insertChild",
    "scope": "node",
    "path": "node",
    "interface": "DocumentNode",
    "member": "insertChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "index",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "child",
        "type": "PageNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Adds a new page at the specified index in the `children` array."
  },
  {
    "id": "node.insertColumn",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "insertColumn",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "columnIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Inserts a column before the specified index."
  },
  {
    "id": "node.insertRow",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "insertRow",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "rowIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Inserts a row before the specified index."
  },
  {
    "id": "node.isDefaultNamespace",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "isDefaultNamespace",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "namespace",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "boolean",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isDefaultNamespace)"
  },
  {
    "id": "node.isEqualNode",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "isEqualNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "otherNode",
        "type": "Node",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "boolean",
    "async": false,
    "deprecated": false,
    "docs": "Returns whether node and otherNode have the same properties.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isEqualNode)"
  },
  {
    "id": "node.isSameNode",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "isSameNode",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "otherNode",
        "type": "Node",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "boolean",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isSameNode)"
  },
  {
    "id": "node.loadAsync",
    "scope": "node",
    "path": "node",
    "interface": "PageNode",
    "member": "loadAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Loads the contents of the page node."
  },
  {
    "id": "node.lockAspectRatio",
    "scope": "node",
    "path": "node",
    "interface": "AspectRatioLockMixin",
    "member": "lockAspectRatio",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Locks the node's `targetAspectRatio` to the current ratio of its width and height."
  },
  {
    "id": "node.lookupNamespaceURI",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "lookupNamespaceURI",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "prefix",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupNamespaceURI)"
  },
  {
    "id": "node.lookupPrefix",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "lookupPrefix",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "namespace",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupPrefix)"
  },
  {
    "id": "node.moveColumn",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "moveColumn",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "fromIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "toIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Moves the column from the start index to the destination index."
  },
  {
    "id": "node.moveRow",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "moveRow",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "fromIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "toIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Moves the row from the start index to the destination index."
  },
  {
    "id": "node.normalize",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "normalize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/normalize)"
  },
  {
    "id": "node.off",
    "scope": "node",
    "path": "node",
    "interface": "PageNode",
    "member": "off",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"nodechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: NodeChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes a callback added with {@link PageNode.on} or {@link PageNode.once}."
  },
  {
    "id": "node.on",
    "scope": "node",
    "path": "node",
    "interface": "PageNode",
    "member": "on",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"nodechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: NodeChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Registers a callback that will be invoked when an event occurs on the page. Current supported events are:\n\n- `\"nodechange\"`: Emitted when a node is added, removed, or updated."
  },
  {
    "id": "node.once",
    "scope": "node",
    "path": "node",
    "interface": "PageNode",
    "member": "once",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "\"nodechange\"",
        "optional": false,
        "rest": false
      },
      {
        "name": "callback",
        "type": "(event: NodeChangeEvent) => void",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Same as {@link PageNode.on}, but the callback will only be called once, the first time the specified event happens."
  },
  {
    "id": "node.outlineStroke",
    "scope": "node",
    "path": "node",
    "interface": "GeometryMixin",
    "member": "outlineStroke",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "VectorNode",
    "async": false,
    "deprecated": false,
    "docs": "This method performs an action similar to using the \"Outline Stroke\" function in the editor from the right-click menu. However, this method creates and returns a new node while leaving the original intact. Returns `null` if the node has no strokes."
  },
  {
    "id": "node.prepend",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "prepend",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "(string | Node)[]",
        "optional": false,
        "rest": true
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/prepend)"
  },
  {
    "id": "node.querySelector#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SVGElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SVGElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SVGElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SVGElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "SVGElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "MathMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "MathMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "MathMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "MathMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "MathMLElementTagNameMap[K]",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementDeprecatedTagNameMap[K]",
    "async": false,
    "deprecated": true,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementDeprecatedTagNameMap[K]",
    "async": false,
    "deprecated": true,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementDeprecatedTagNameMap[K]",
    "async": false,
    "deprecated": true,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementDeprecatedTagNameMap[K]",
    "async": false,
    "deprecated": true,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "HTMLElementDeprecatedTagNameMap[K]",
    "async": false,
    "deprecated": true,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "E",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "E",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "E",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "E",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelector#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelector",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "E",
    "async": false,
    "deprecated": false,
    "docs": "Returns the first element that is a descendant of node that matches selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
  },
  {
    "id": "node.querySelectorAll#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#0",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<SVGElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<SVGElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<SVGElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<SVGElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#1",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<SVGElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<MathMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<MathMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<MathMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<MathMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#2",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 2,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<MathMLElementTagNameMap[K]>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementDeprecatedTagNameMap[K]>",
    "async": false,
    "deprecated": true,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementDeprecatedTagNameMap[K]>",
    "async": false,
    "deprecated": true,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementDeprecatedTagNameMap[K]>",
    "async": false,
    "deprecated": true,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementDeprecatedTagNameMap[K]>",
    "async": false,
    "deprecated": true,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#3",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 3,
    "parameters": [
      {
        "name": "selectors",
        "type": "K",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<HTMLElementDeprecatedTagNameMap[K]>",
    "async": false,
    "deprecated": true,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<E>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<E>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<E>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<E>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.querySelectorAll#4",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "querySelectorAll",
    "kind": "method",
    "overloadIndex": 4,
    "parameters": [
      {
        "name": "selectors",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "NodeListOf<E>",
    "async": false,
    "deprecated": false,
    "docs": "Returns all element descendants of node that match selectors.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
  },
  {
    "id": "node.remove",
    "scope": "node",
    "path": "node",
    "interface": "ChildNode",
    "member": "remove",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes node.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/remove)"
  },
  {
    "id": "node.remove",
    "scope": "node",
    "path": "node",
    "interface": "BaseNodeMixin",
    "member": "remove",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes this node and **all of its children** from the document."
  },
  {
    "id": "node.remove",
    "scope": "node",
    "path": "node",
    "interface": "BaseStyleMixin",
    "member": "remove",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Deletes a local style."
  },
  {
    "id": "node.removeChild",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "removeChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "child",
        "type": "T",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "T",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/removeChild)"
  },
  {
    "id": "node.removeColumn",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "removeColumn",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "columnIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the column at the specified index."
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#0",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "type",
        "type": "K",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "(this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "AudioWorkletNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ConstantSourceNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeEventListener#1",
    "scope": "node",
    "path": "node",
    "interface": "ScriptProcessorNode",
    "member": "removeEventListener",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "type",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "listener",
        "type": "EventListenerOrEventListenerObject",
        "optional": false,
        "rest": false
      },
      {
        "name": "options",
        "type": "boolean | EventListenerOptions",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the event listener in target's event listener list with the same type, callback, and options.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)"
  },
  {
    "id": "node.removeRow",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "removeRow",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "rowIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Removes the row at the specified index."
  },
  {
    "id": "node.replaceChild",
    "scope": "node",
    "path": "node",
    "interface": "Node",
    "member": "replaceChild",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "node",
        "type": "Node",
        "optional": false,
        "rest": false
      },
      {
        "name": "child",
        "type": "T",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "T",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/replaceChild)"
  },
  {
    "id": "node.replaceChildren",
    "scope": "node",
    "path": "node",
    "interface": "ParentNode",
    "member": "replaceChildren",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "(string | Node)[]",
        "optional": false,
        "rest": true
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/replaceChildren)"
  },
  {
    "id": "node.replaceWith",
    "scope": "node",
    "path": "node",
    "interface": "ChildNode",
    "member": "replaceWith",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "nodes",
        "type": "(string | Node)[]",
        "optional": false,
        "rest": true
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceWith)"
  },
  {
    "id": "node.rescale",
    "scope": "node",
    "path": "node",
    "interface": "LayoutMixin",
    "member": "rescale",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "scale",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Rescales the node. This API function is the equivalent of using the Scale Tool from the toolbar."
  },
  {
    "id": "node.rescale",
    "scope": "node",
    "path": "node",
    "interface": "ShapeWithTextNode",
    "member": "rescale",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "scale",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Rescale the ShapeWithText."
  },
  {
    "id": "node.resetOverrides",
    "scope": "node",
    "path": "node",
    "interface": "InstanceNode",
    "member": "resetOverrides",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resets all direct overrides on this instance."
  },
  {
    "id": "node.resize",
    "scope": "node",
    "path": "node",
    "interface": "LayoutMixin",
    "member": "resize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resizes the node. If the node contains children with constraints, it applies those constraints during resizing. If the parent has auto-layout, causes the parent to be resized."
  },
  {
    "id": "node.resize",
    "scope": "node",
    "path": "node",
    "interface": "ShapeWithTextNode",
    "member": "resize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resize the ShapeWithText."
  },
  {
    "id": "node.resize",
    "scope": "node",
    "path": "node",
    "interface": "MediaNode",
    "member": "resize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resizes the media node."
  },
  {
    "id": "node.resizeColumn",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "resizeColumn",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "columnIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resizes the column. Columns cannot be resized to be smaller than their minimum size."
  },
  {
    "id": "node.resizeRow",
    "scope": "node",
    "path": "node",
    "interface": "TableNode",
    "member": "resizeRow",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "rowIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resizes the row. Rows cannot be resized to be smaller than their minimum size."
  },
  {
    "id": "node.resizeWithoutConstraints",
    "scope": "node",
    "path": "node",
    "interface": "LayoutMixin",
    "member": "resizeWithoutConstraints",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resizes the node. Children of the node are never resized, even if those children have constraints. If the parent has auto-layout, causes the parent to be resized (this constraint cannot be ignored)."
  },
  {
    "id": "node.resizeWithoutConstraints",
    "scope": "node",
    "path": "node",
    "interface": "MediaNode",
    "member": "resizeWithoutConstraints",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resizes the media node without constraints."
  },
  {
    "id": "node.resizeWithoutConstraints",
    "scope": "node",
    "path": "node",
    "interface": "SectionNode",
    "member": "resizeWithoutConstraints",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "width",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "height",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Resizes the section node without constraints."
  },
  {
    "id": "node.setBoundVariable#0",
    "scope": "node",
    "path": "node",
    "interface": "SceneNodeMixin",
    "member": "setBoundVariable",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "field",
        "type": "VariableBindableNodeField | VariableBindableTextField",
        "optional": false,
        "rest": false
      },
      {
        "name": "variableId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Binds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\nBinds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\n\nIf `null` is provided as the variable, the given `field` will be unbound from any variables."
  },
  {
    "id": "node.setBoundVariable#0",
    "scope": "node",
    "path": "node",
    "interface": "SceneNodeMixin",
    "member": "setBoundVariable",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "field",
        "type": "VariableBindableNodeField | VariableBindableTextField",
        "optional": false,
        "rest": false
      },
      {
        "name": "variableId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Binds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\nBinds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\n\nIf `null` is provided as the variable, the given `field` will be unbound from any variables."
  },
  {
    "id": "node.setBoundVariable#1",
    "scope": "node",
    "path": "node",
    "interface": "SceneNodeMixin",
    "member": "setBoundVariable",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "field",
        "type": "VariableBindableNodeField | VariableBindableTextField",
        "optional": false,
        "rest": false
      },
      {
        "name": "variable",
        "type": "Variable",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Binds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\nBinds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\n\nIf `null` is provided as the variable, the given `field` will be unbound from any variables."
  },
  {
    "id": "node.setBoundVariable#1",
    "scope": "node",
    "path": "node",
    "interface": "SceneNodeMixin",
    "member": "setBoundVariable",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "field",
        "type": "VariableBindableNodeField | VariableBindableTextField",
        "optional": false,
        "rest": false
      },
      {
        "name": "variable",
        "type": "Variable",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Binds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\nBinds the provided `field` on this node to the given variable. Please see the [Working with Variables](https://developers.figma.com/docs/plugins/working-with-variables) guide for how to get and set variable bindings.\n\nIf `null` is provided as the variable, the given `field` will be unbound from any variables."
  },
  {
    "id": "node.setDevResourcePreviewAsync",
    "scope": "node",
    "path": "node",
    "interface": "DevResourcesMixin",
    "member": "setDevResourcePreviewAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "url",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "preview",
        "type": "PlainTextElement",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Caution: This is a private API only available to [Figma partners](https://www.figma.com/partners/)"
  },
  {
    "id": "node.setEffectStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "BlendMixin",
    "member": "setEffectStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set the {@link EffectStyle} that the properties of this node are linked to."
  },
  {
    "id": "node.setExplicitVariableModeForCollection#0",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "setExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "collectionId",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "modeId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Sets an explicit mode for the given collection on this node"
  },
  {
    "id": "node.setExplicitVariableModeForCollection#0",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "setExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "collectionId",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "modeId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Sets an explicit mode for the given collection on this node"
  },
  {
    "id": "node.setExplicitVariableModeForCollection#1",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "setExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "collection",
        "type": "VariableCollection",
        "optional": false,
        "rest": false
      },
      {
        "name": "modeId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sets an explicit mode for the given collection on this node"
  },
  {
    "id": "node.setExplicitVariableModeForCollection#1",
    "scope": "node",
    "path": "node",
    "interface": "ExplicitVariableModesMixin",
    "member": "setExplicitVariableModeForCollection",
    "kind": "method",
    "overloadIndex": 1,
    "parameters": [
      {
        "name": "collection",
        "type": "VariableCollection",
        "optional": false,
        "rest": false
      },
      {
        "name": "modeId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sets an explicit mode for the given collection on this node"
  },
  {
    "id": "node.setFillStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "MinimalFillsMixin",
    "member": "setFillStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Sets the {@link PaintStyle} that the {@link MinimalFillsMixin.fills} property of this node is linked to."
  },
  {
    "id": "node.setGridChildPosition",
    "scope": "node",
    "path": "node",
    "interface": "GridChildrenMixin",
    "member": "setGridChildPosition",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "rowIndex",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "columnIndex",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Applicable only on direct children of 'GRID' auto-layout frames. Sets the position of the node"
  },
  {
    "id": "node.setGridStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "BaseFrameMixin",
    "member": "setGridStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set the {@link GridStyle} that the {@link BaseFrameMixin.layoutGrids} property of this node is linked to."
  },
  {
    "id": "node.setOrientation",
    "scope": "node",
    "path": "node",
    "interface": "PannerNode",
    "member": "setOrientation",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "x",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "y",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "z",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true
  },
  {
    "id": "node.setPeriodicWave",
    "scope": "node",
    "path": "node",
    "interface": "OscillatorNode",
    "member": "setPeriodicWave",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "periodicWave",
        "type": "PeriodicWave",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/setPeriodicWave)"
  },
  {
    "id": "node.setPluginData",
    "scope": "node",
    "path": "node",
    "interface": "PluginDataMixin",
    "member": "setPluginData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Lets you store custom information on any node or style, **private** to your plugin. The total size of your entry (`pluginId`, `key`, `value`) cannot exceed 100 kB."
  },
  {
    "id": "node.setPosition",
    "scope": "node",
    "path": "node",
    "interface": "PannerNode",
    "member": "setPosition",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "x",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "y",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "z",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true
  },
  {
    "id": "node.setProperties",
    "scope": "node",
    "path": "node",
    "interface": "InstanceNode",
    "member": "setProperties",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "properties",
        "type": "{ [propertyName: string]: string | boolean | VariableAlias; }",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sets the component properties and values for this instance. `propertyName` corresponds to the names returned by `componentPropertyDefinitions` and should be suffixed with `'#'` and a unique ID for `'TEXT'`, `'BOOLEAN'`, and `'INSTANCE_SWAP'` properties. In the case of name collision, this function prioritizes updating the `'VARIANT'` type properties. Existing properties that are non-specified in the function will maintain their current value."
  },
  {
    "id": "node.setRangeBoundVariable",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeBoundVariable",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "field",
        "type": "VariableBindableTextField",
        "optional": false,
        "rest": false
      },
      {
        "name": "variable",
        "type": "Variable",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `boundVariable` for a given field from characters in range `start` (inclusive) to `end` (exclusive). Requires any new fonts to be loaded."
  },
  {
    "id": "node.setRangeFills",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeFills",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "Paint[]",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `fills` from characters in range `start` (inclusive) to `end` (exclusive). Requires font to be loaded.\n\nCan be bound to color variables by using {@link VariablesAPI.setBoundVariableForPaint} on one or more of the provided `Paint`s"
  },
  {
    "id": "node.setRangeFillStyleId",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeFillStyleId",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Set the `fillStyleId` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeFillStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeFillStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set the provided {@link PaintStyle} as a fill to characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.setRangeFontName",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeFontName",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "FontName",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `fontName` from characters in range `start` (inclusive) to `end` (exclusive). Requires the new font to be loaded."
  },
  {
    "id": "node.setRangeFontSize",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeFontSize",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `fontSize` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeHyperlink",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeHyperlink",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "HyperlinkTarget",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `hyperlink` from characters in range `start` (inclusive) to `end` (exclusive). Removes the hyperlink in range if `value` is `null`."
  },
  {
    "id": "node.setRangeIndentation",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeIndentation",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `indentation` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.setRangeLetterSpacing",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeLetterSpacing",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "LetterSpacing",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `letterSpacing` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeLineHeight",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeLineHeight",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "LineHeight",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `lineHeight` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeListOptions",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeListOptions",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "TextListOptions",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textListOptions` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.setRangeListSpacing",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeListSpacing",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `listSpacing` from characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.setRangeParagraphIndent",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeParagraphIndent",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `paragraphIndent` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.setRangeParagraphSpacing",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeParagraphSpacing",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "number",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `paragraphSpacing` for a paragraph containing characters in range `start` (inclusive) to `end` (exclusive)."
  },
  {
    "id": "node.setRangeTextCase",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeTextCase",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "TextCase",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textCase` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextDecoration",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeTextDecoration",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "TextDecoration",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textDecoration` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextDecorationColor",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeTextDecorationColor",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "TextDecorationColor",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textDecorationColor` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextDecorationOffset",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeTextDecorationOffset",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "TextDecorationOffset",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textDecorationOffset` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextDecorationSkipInk",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeTextDecorationSkipInk",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "boolean",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textDecorationSkipInk` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextDecorationStyle",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeTextDecorationStyle",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "TextDecorationStyle",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textDecorationStyle` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextDecorationThickness",
    "scope": "node",
    "path": "node",
    "interface": "NonResizableTextMixin",
    "member": "setRangeTextDecorationThickness",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "TextDecorationThickness",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the `textDecorationThickness` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextStyleId",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeTextStyleId",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": true,
    "docs": "Set the `textStyleId` from characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setRangeTextStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "BaseNonResizableTextMixin",
    "member": "setRangeTextStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "start",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "end",
        "type": "number",
        "optional": false,
        "rest": false
      },
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set the provided {@link TextStyle} to characters in range `start` (inclusive) to `end` (exclusive). Requires the font to be loaded."
  },
  {
    "id": "node.setReactionsAsync",
    "scope": "node",
    "path": "node",
    "interface": "ReactionMixin",
    "member": "setReactionsAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "reactions",
        "type": "Reaction[]",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Updates the reactions on this node. See {@link ReactionMixin.reactions} for a usage example."
  },
  {
    "id": "node.setRelaunchData",
    "scope": "node",
    "path": "node",
    "interface": "BaseNodeMixin",
    "member": "setRelaunchData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "data",
        "type": "{ [command: string]: string; }",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sets state on the node to show a button and description when the node is selected. Clears the button and description when `relaunchData` is `{}`.\n\nNote: In Figma and Dev Mode, this shows up in the properties panel. In FigJam, this shows up in the property menu. See [here](https://developers.figma.com/docs/plugins/api/properties/nodes-setrelaunchdata#example-figma-design-ui) for examples."
  },
  {
    "id": "node.setSharedPluginData",
    "scope": "node",
    "path": "node",
    "interface": "PluginDataMixin",
    "member": "setSharedPluginData",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "namespace",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "key",
        "type": "string",
        "optional": false,
        "rest": false
      },
      {
        "name": "value",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Lets you store custom information on any node or style, **public** to all plugins. The total size of your entry (`namespace`, `key`, `value`) cannot exceed 100 kB."
  },
  {
    "id": "node.setSlideTransition",
    "scope": "node",
    "path": "node",
    "interface": "SlideNode",
    "member": "setSlideTransition",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "transition",
        "type": "SlideTransition",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Set the {@link SlideTransition} of the slide node."
  },
  {
    "id": "node.setStrokeStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "MinimalStrokesMixin",
    "member": "setStrokeStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set the {@link PaintStyle} that the {@link MinimalStrokesMixin.strokes} property of this node is linked to."
  },
  {
    "id": "node.setTextStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "TextNode",
    "member": "setTextStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set the {@link TextStyle} that the text properties of this node are linked to. Requires the font to be loaded."
  },
  {
    "id": "node.setTextStyleIdAsync",
    "scope": "node",
    "path": "node",
    "interface": "TextPathNode",
    "member": "setTextStyleIdAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "styleId",
        "type": "string",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Set the {@link TextStyle} that the text properties of this node are linked to. Requires the font to be loaded."
  },
  {
    "id": "node.setVectorNetworkAsync",
    "scope": "node",
    "path": "node",
    "interface": "VectorLikeMixin",
    "member": "setVectorNetworkAsync",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "vectorNetwork",
        "type": "VectorNetwork",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "Promise<void>",
    "async": true,
    "deprecated": false,
    "docs": "Updates the vector network."
  },
  {
    "id": "node.setWidgetSyncedState",
    "scope": "node",
    "path": "node",
    "interface": "WidgetNode",
    "member": "setWidgetSyncedState",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "syncedState",
        "type": "{ [name: string]: any; }",
        "optional": false,
        "rest": false
      },
      {
        "name": "syncedMap",
        "type": "{ [mapName: string]: { [key: string]: any; }; }",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Sets the entire synced state and synced map values for a widget. This function only sets the synced state for widgets with a matching `node.widgetId` (an instance of the same widget). This means that running this function only works inside of a widget."
  },
  {
    "id": "node.start",
    "scope": "node",
    "path": "node",
    "interface": "AudioBufferSourceNode",
    "member": "start",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "when",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "offset",
        "type": "number",
        "optional": true,
        "rest": false
      },
      {
        "name": "duration",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/start)"
  },
  {
    "id": "node.start",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "start",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "when",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/start)"
  },
  {
    "id": "node.stop",
    "scope": "node",
    "path": "node",
    "interface": "AudioScheduledSourceNode",
    "member": "stop",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "when",
        "type": "number",
        "optional": true,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/stop)"
  },
  {
    "id": "node.swapComponent",
    "scope": "node",
    "path": "node",
    "interface": "InstanceNode",
    "member": "swapComponent",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [
      {
        "name": "componentNode",
        "type": "ComponentNode",
        "optional": false,
        "rest": false
      }
    ],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Swaps this instance's current main component with `componentNode` and preserves overrides using the same heuristics as instance swap in the Figma editor UI. Note that we may update these override preservation heuristics from time to time."
  },
  {
    "id": "node.toString",
    "scope": "node",
    "path": "node",
    "interface": "BaseNodeMixin",
    "member": "toString",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "string",
    "async": false,
    "deprecated": false,
    "docs": "Returns a string representation of the node. For debugging purposes only, do not rely on the exact output of this string in production code."
  },
  {
    "id": "node.unlockAspectRatio",
    "scope": "node",
    "path": "node",
    "interface": "AspectRatioLockMixin",
    "member": "unlockAspectRatio",
    "kind": "method",
    "overloadIndex": 0,
    "parameters": [],
    "returns": "void",
    "async": false,
    "deprecated": false,
    "docs": "Unlocks the node's `targetAspectRatio`."
  }
];

export const manifestIndex = new Map<string, ManifestEntry[]>(
  figmaManifest.reduce<[string, ManifestEntry[]][]>((acc, entry) => {
    const key = entry.path + '.' + entry.member;
    const existing = acc.find(([k]) => k === key);
    if (existing) {
      existing[1].push(entry);
    } else {
      acc.push([key, [entry]]);
    }
    return acc;
  }, [])
);

export function findManifestEntry(path: string, method: string): ManifestEntry[] | undefined {
  return manifestIndex.get(path + '.' + method);
}
